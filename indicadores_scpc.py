
import schedule
import time
import threading
import streamlit as st
import os
import json
import hashlib
import pandas as pd
from datetime import datetime, timedelta
import base64
from io import BytesIO
import plotly.express as px
import locale
from cryptography.fernet import Fernet
from pathlib import Path  # Adicione esta linha

DATA_DIR = "data"
INDICATORS_FILE = os.path.join(DATA_DIR, "indicators.json")
RESULTS_FILE = os.path.join(DATA_DIR, "results.json")
CONFIG_FILE = os.path.join(DATA_DIR, "config.json")
USERS_FILE = os.path.join(DATA_DIR, "users.json")
BACKUP_LOG_FILE = os.path.join(DATA_DIR, "backup_log.json")
INDICATOR_LOG_FILE = os.path.join(DATA_DIR, "indicator_log.json")
USER_LOG_FILE = os.path.join(DATA_DIR, "user_log.json")
KEY_FILE = "secret.key"


# Fun√ß√µes para converter a imagem para Base64 (DEFINI√á√ÉO GLOBAL)
def img_to_bytes(img_path):
    try:
        img_bytes = Path(img_path).read_bytes()
        encoded = base64.b64encode(img_bytes).decode()
        return encoded
    except FileNotFoundError:
        st.error(f"Arquivo n√£o encontrado: {img_path}")
        return None
    except Exception as e:
        st.error(f"Erro ao ler o arquivo: {e}")
        return None

def img_to_html(img_path):
    img_bytes = img_to_bytes(img_path)
    if img_bytes:
        img_html = "<img src='data:image/png;base64,{}' class='img-fluid' width='150' style='display: block; margin: 0 auto;'>".format(
            img_bytes
        )
        return img_html
    else:
        return ""


def backup_job(INDICATORS_FILE, RESULTS_FILE, CONFIG_FILE, USERS_FILE, BACKUP_LOG_FILE, INDICATOR_LOG_FILE, USER_LOG_FILE, KEY_FILE, cipher):
    try:
        backup_file = backup_data(INDICATORS_FILE, RESULTS_FILE, CONFIG_FILE, USERS_FILE, BACKUP_LOG_FILE,
                                  INDICATOR_LOG_FILE, USER_LOG_FILE, cipher, tipo_backup="seguranca")

        if backup_file:
            print(f"Backup autom√°tico criado: {backup_file}")
            config = load_config(CONFIG_FILE)
            config["last_backup_date"] = datetime.now().strftime("%d/%m/%Y %H:%M")
            save_config(config, CONFIG_FILE)
            keep_last_backups("backups", 3)
        else:
            print("Falha ao criar o backup autom√°tico.")
    except Exception as e:
        print(f"Erro durante o backup: {e}")

def initialize_session_state():
    """Inicializa o estado da sess√£o do Streamlit."""
    if 'authenticated' not in st.session_state:
        st.session_state.authenticated = False

def configure_locale():
    """Configura o locale para portugu√™s do Brasil."""
    locale.setlocale(locale.LC_ALL, 'pt_BR.UTF-8')

def configure_page():
    """Configura a p√°gina do Streamlit."""
    st.set_page_config(
        page_title="Portal de Indicadores",
        page_icon="üìä",
        layout="wide"
    )

def create_data_directory(DATA_DIR):
    """Cria o diret√≥rio de dados se n√£o existir."""
    if not os.path.exists(DATA_DIR):
        os.makedirs(DATA_DIR)

def initialize_json_files(INDICATORS_FILE, RESULTS_FILE, CONFIG_FILE, USERS_FILE):
    """Inicializa os arquivos JSON se n√£o existirem."""
    if not os.path.exists(INDICATORS_FILE):
        with open(INDICATORS_FILE, "w") as f:
            json.dump([], f)

    if not os.path.exists(RESULTS_FILE):
        with open(RESULTS_FILE, "w") as f:
            json.dump([], f)

    if not os.path.exists(CONFIG_FILE):
        with open(CONFIG_FILE, "w") as f:
            json.dump({"theme": "padrao"}, f)

    if not os.path.exists(USERS_FILE):
        default_users = {
            "admin": {
                "password": hashlib.sha256("6105/*".encode()).hexdigest(),
                "tipo": "Administrador",
                "setor": "Todos"  # Admin tem acesso a todos os setores
            }
        }
        with open(USERS_FILE, "w") as f:
            json.dump(default_users, f)

def define_default_theme():
    """Define o tema padr√£o."""
    TEMA_PADRAO = {
        "name": "Padr√£o",
        "primary_color": "#1E88E5",
        "secondary_color": "#26A69A",
        "background_color": "#FFFFFF",
        "text_color": "#37474F",
        "accent_color": "#FF5252",
        "chart_colors": ["#1E88E5", "#26A69A", "#FFC107", "#7E57C2", "#EC407A"],
        "is_dark": False
    }
    return TEMA_PADRAO

def define_lists():
    """Define as listas de setores e tipos de gr√°ficos."""
    SETORES = ["RH", "Financeiro", "Opera√ß√µes", "Marketing", "Comercial", "TI", "Log√≠stica", "Produ√ß√£o"]
    TIPOS_GRAFICOS = ["Linha", "Barra", "Pizza", "√Årea", "Dispers√£o"]
    return SETORES, TIPOS_GRAFICOS

def define_menu_icons():
    """Define os √≠cones para o menu."""
    MENU_ICONS = {
        "Dashboard": "üìà",
        "Criar Indicador": "‚ûï",
        "Editar Indicador": "‚úèÔ∏è",
        "Preencher Indicador": "üìù",
        "Vis√£o Geral": "üìä",
        "Gerenciar Usu√°rios": "üë•",
        "Configura√ß√µes": "‚öôÔ∏è"
    }
    return MENU_ICONS

def generate_key(KEY_FILE):
    """Gera uma nova chave de criptografia."""
    if not os.path.exists(KEY_FILE):
        key = Fernet.generate_key()
        with open(KEY_FILE, "wb") as key_file:
            key_file.write(key)
        return key
    return None

def load_key(KEY_FILE):
    """Carrega a chave de criptografia do arquivo ou gera uma nova."""
    try:
        with open(KEY_FILE, "rb") as key_file:
            return key_file.read()
    except FileNotFoundError:
        st.error("Arquivo de chave n√£o encontrado. Execute a fun√ß√£o generate_key primeiro.")
        return None

def initialize_cipher(KEY_FILE):
    """Inicializa o objeto Fernet para criptografia."""
    key = load_key(KEY_FILE)
    if key:
        return Fernet(key)
    return None

def backup_data(INDICATORS_FILE, RESULTS_FILE, CONFIG_FILE, USERS_FILE, BACKUP_LOG_FILE, INDICATOR_LOG_FILE, USER_LOG_FILE, cipher, tipo_backup="user"):
    """Cria um arquivo de backup criptografado com todos os dados."""
    if not cipher:
        st.error("Objeto de criptografia n√£o inicializado.")
        return None

    all_data = {
        "indicators": load_indicators(INDICATORS_FILE),
        "results": load_results(RESULTS_FILE),
        "config": load_config(CONFIG_FILE),
        "users": load_users(USERS_FILE),
        "backup_log": load_backup_log(BACKUP_LOG_FILE),
        "indicator_log": load_indicator_log(INDICATOR_LOG_FILE),
        "user_log": load_user_log(USER_LOG_FILE)
    }

    # Converter todos os dados para string antes de criptografar
    all_data_str = json.dumps(all_data, indent=4, default=str).encode()

    encrypted_data = cipher.encrypt(all_data_str)

    # Adicionar identificador ao nome do arquivo
    if tipo_backup == "user":
        BACKUP_FILE = os.path.join("backups", f"backup_user_{datetime.now().strftime('%Y%m%d%H%M%S')}.bkp")
    else:
        BACKUP_FILE = os.path.join("backups", f"backup_seguranca_{datetime.now().strftime('%Y%m%d%H%M%S')}.bkp")

    # Cria o diret√≥rio de backups se n√£o existir
    if not os.path.exists("backups"):
        os.makedirs("backups")

    try:
        with open(BACKUP_FILE, "wb") as backup_file:
            backup_file.write(encrypted_data)
        log_backup_action("Backup criado", BACKUP_FILE, BACKUP_LOG_FILE)  # Registrar a√ß√£o de backup
        return BACKUP_FILE
    except Exception as e:
        st.error(f"Erro ao criar o backup: {e}")
        return None
def keep_last_backups(BACKUP_DIR, num_backups):
    """Mant√©m apenas os √∫ltimos backups no diret√≥rio."""
    # Cria o diret√≥rio de backups se n√£o existir
    if not os.path.exists(BACKUP_DIR):
        os.makedirs(BACKUP_DIR)

    backups = sorted([os.path.join(BACKUP_DIR, f) for f in os.listdir(BACKUP_DIR) if f.startswith("backup_") and f.endswith(".bkp")],
                     key=os.path.getmtime, reverse=True)
    if len(backups) > num_backups:
        for backup in backups[num_backups:]:
            try:
                os.remove(backup)
                print(f"Backup removido: {backup}")
            except Exception as e:
                print(f"Erro ao remover backup: {backup} - {e}")

def agendar_backup(INDICATORS_FILE, RESULTS_FILE, CONFIG_FILE, USERS_FILE, BACKUP_LOG_FILE, INDICATOR_LOG_FILE, USER_LOG_FILE, KEY_FILE, cipher):
    config = load_config(CONFIG_FILE)
    backup_hour = config["backup_hour"]

    schedule.clear()  # Limpa qualquer agendamento anterior

    schedule.every().day.at(backup_hour).do(backup_job, INDICATORS_FILE, RESULTS_FILE, CONFIG_FILE, USERS_FILE, BACKUP_LOG_FILE, INDICATOR_LOG_FILE, USER_LOG_FILE, KEY_FILE, cipher)

    while True:
        schedule.run_pending()
        time.sleep(60)  # Verifica a cada minuto

def restore_data(backup_file, INDICATORS_FILE, RESULTS_FILE, CONFIG_FILE, USERS_FILE, BACKUP_LOG_FILE, INDICATOR_LOG_FILE, USER_LOG_FILE, cipher):
    """Restaura os dados a partir de um arquivo de backup criptografado."""
    if not cipher:
        st.error("Objeto de criptografia n√£o inicializado.")
        return False

    try:
        with open(backup_file, "rb") as file:
            encrypted_data = file.read()

        decrypted_data_str = cipher.decrypt(encrypted_data).decode()
        restored_data = json.loads(decrypted_data_str)

        save_indicators(restored_data["indicators"], INDICATORS_FILE)
        save_results(restored_data["results"], RESULTS_FILE)
        save_config(restored_data["config"], CONFIG_FILE)
        save_users(restored_data["users"], USERS_FILE)
        save_backup_log(restored_data["backup_log"], BACKUP_LOG_FILE)
        save_indicator_log(restored_data["indicator_log"], INDICATOR_LOG_FILE)
        save_user_log(restored_data["user_log"], USER_LOG_FILE)

        log_backup_action("Backup restaurado", backup_file, BACKUP_LOG_FILE)  # Registrar a√ß√£o de restaura√ß√£o
        return True
    except Exception as e:
        st.error(f"Erro ao restaurar o backup: {e}")
        return False
def load_backup_log(BACKUP_LOG_FILE):
    """Carrega o log de backup do arquivo."""
    try:
        with open(BACKUP_LOG_FILE, "r") as f:
            return json.load(f)
    except FileNotFoundError:
        return []
    except json.JSONDecodeError:
        st.warning("Erro ao decodificar o arquivo de log de backup. O arquivo pode estar corrompido.")
        return []

def save_backup_log(log_data, BACKUP_LOG_FILE):
    """Salva o log de backup no arquivo."""
    try:
        with open(BACKUP_LOG_FILE, "w") as f:
            json.dump(log_data, f, indent=4, default=str)
    except Exception as e:
        st.error(f"Erro ao salvar o log de backup: {e}")

def log_backup_action(action, file_name, BACKUP_LOG_FILE):
    """Registra uma a√ß√£o de backup no log."""
    log = load_backup_log(BACKUP_LOG_FILE)
    log_entry = {
        "timestamp": datetime.now().isoformat(),
        "action": action,
        "file_name": file_name,
        "user": st.session_state.get("username", "System")
    }
    log.append(log_entry)
    save_backup_log(log, BACKUP_LOG_FILE)

def load_indicators(INDICATORS_FILE):
    """Carrega os indicadores do arquivo."""
    try:
        with open(INDICATORS_FILE, "r") as f:
            indicators = json.load(f)
            return indicators
    except FileNotFoundError:
        return []
    except json.JSONDecodeError:
        return []

def save_indicators(indicators, INDICATORS_FILE):
    """Salva os indicadores no arquivo."""
    try:
        with open(INDICATORS_FILE, "w") as f:
            json.dump(indicators, f, indent=4)
    except Exception as e:
        st.error(f"Erro ao salvar o arquivo de indicadores: {e}")

def log_indicator_action(action, indicator_id, INDICATOR_LOG_FILE):
    """Registra uma a√ß√£o de indicador no log."""
    log = load_indicator_log(INDICATOR_LOG_FILE)
    log_entry = {
        "timestamp": datetime.now().isoformat(),
        "action": action,
        "indicator_id": indicator_id,
        "user": st.session_state.get("username", "System")
    }
    log.append(log_entry)
    save_indicator_log(log, INDICATOR_LOG_FILE)

def load_users(USERS_FILE):
    """Carrega os usu√°rios do arquivo."""
    try:
        with open(USERS_FILE, "r") as f:
            return json.load(f)
    except FileNotFoundError:
        default_users = {
            "admin": {
                "password": hashlib.sha256("6105/*".encode()).hexdigest(),
                "tipo": "Administrador",
                "setor": "Todos"
            }
        }
        save_users(default_users, USERS_FILE)
        return default_users
    except json.JSONDecodeError:
        st.error("Erro ao decodificar o arquivo de usu√°rios. O arquivo pode estar corrompido.")
        return {}

def save_user_log(log_data, USER_LOG_FILE):
    """Salva o log de usu√°rios no arquivo."""
    try:
        with open(USER_LOG_FILE, "w") as f:
            json.dump(log_data, f, indent=4, default=str)
    except Exception as e:
        st.error(f"Erro ao salvar o log de usu√°rios: {e}")

def log_user_action(action, username, USER_LOG_FILE):
    """Registra uma a√ß√£o de usu√°rio no log."""
    log = load_user_log(USER_LOG_FILE)
    log_entry = {
        "timestamp": datetime.now().isoformat(),
        "action": action,
        "username": username,
        "user": st.session_state.get("username", "System")
    }
    log.append(log_entry)
    save_user_log(log, USER_LOG_FILE)

def delete_user(username, USERS_FILE, USER_LOG_FILE):
    """Exclui um usu√°rio do arquivo de usu√°rios."""
    users = load_users(USERS_FILE)
    if username in users:
        del users[username]
        save_users(users, USERS_FILE)
        log_user_action("Usu√°rio exclu√≠do", username, USER_LOG_FILE)  # Registrar a√ß√£o de exclus√£o
        return True
    return False

def load_user_log(USER_LOG_FILE):
    """Carrega o log de usu√°rios do arquivo."""
    try:
        with open(USER_LOG_FILE, "r") as f:
            return json.load(f)
    except FileNotFoundError:
        return []
    except json.JSONDecodeError:
        st.warning("Erro ao decodificar o arquivo de log de usu√°rios. O arquivo pode estar corrompido.")
        return []

def save_users(users, USERS_FILE):
    """Salva os usu√°rios no arquivo."""
    try:
        with open(USERS_FILE, "w") as f:
            json.dump(users, f, indent=4)
    except Exception as e:
        st.error(f"Erro ao salvar o arquivo de usu√°rios: {e}")

def load_indicator_log(INDICATOR_LOG_FILE):
    """Carrega o log de indicadores do arquivo."""
    try:
        with open(INDICATOR_LOG_FILE, "r") as f:
            return json.load(f)
    except FileNotFoundError:
        return []
    except json.JSONDecodeError:
        st.warning("Erro ao decodificar o arquivo de log de indicadores. O arquivo pode estar corrompido.")
        return []

def save_indicator_log(log_data, INDICATOR_LOG_FILE):
    """Salva o log de indicadores no arquivo."""
    try:
        with open(INDICATOR_LOG_FILE, "w") as f:
            json.dump(log_data, f, indent=4, default=str)
    except Exception as e:
        st.error(f"Erro ao salvar o log de indicadores: {e}")

def delete_indicator(indicator_id, INDICATORS_FILE, RESULTS_FILE, INDICATOR_LOG_FILE):
    """Exclui um indicador e seus resultados associados."""
    indicators = load_indicators(INDICATORS_FILE)
    results = load_results(RESULTS_FILE)

    # Remover indicador
    indicators = [ind for ind in indicators if ind["id"] != indicator_id]
    save_indicators(indicators, INDICATORS_FILE)

    # Remover resultados associados
    results = [r for r in results if r["indicator_id"] != indicator_id]
    save_results(results, RESULTS_FILE)

    log_indicator_action("Indicador exclu√≠do", indicator_id, INDICATOR_LOG_FILE)  # Registrar a√ß√£o de exclus√£o
    st.success(f"Indicador com ID '{indicator_id}' e seus resultados associados foram exclu√≠dos com sucesso!")

def load_results(RESULTS_FILE):
    """Carrega os resultados do arquivo."""
    try:
        with open(RESULTS_FILE, "r") as f:
            return json.load(f)
    except FileNotFoundError:
        return []
    except json.JSONDecodeError:
        st.error("Erro ao decodificar o arquivo de resultados. O arquivo pode estar corrompido.")
        return []

def save_results(results, RESULTS_FILE):
    """Salva os resultados no arquivo."""
    try:
        with open(RESULTS_FILE, "w") as f:
            json.dump(results, f, indent=4)
    except Exception as e:
        st.error(f"Erro ao salvar o arquivo de resultados: {e}")

def load_config(CONFIG_FILE):
    """Carrega a configura√ß√£o do arquivo."""
    try:
        with open(CONFIG_FILE, "r") as f:
            config = json.load(f)
            # Garante que a chave 'backup_hour' exista
            if "backup_hour" not in config:
                config["backup_hour"] = "00:00"
            # Garante que a chave 'last_backup_date' exista
            if "last_backup_date" not in config:
                config["last_backup_date"] = ""
            return config
    except FileNotFoundError:
        config = {"theme": "padrao", "backup_hour": "00:00", "last_backup_date": ""}
        save_config(config, CONFIG_FILE)
        return config
    except json.JSONDecodeError:
        st.error("Erro ao decodificar o arquivo de configura√ß√£o. O arquivo pode estar corrompido.")
        return {"theme": "padrao", "backup_hour": "00:00", "last_backup_date": ""}

def save_config(config, CONFIG_FILE):
    """Salva a configura√ß√£o no arquivo."""
    try:
        with open(CONFIG_FILE, "w") as f:
            json.dump(config, f, indent=4)
    except Exception as e:
        st.error(f"Erro ao salvar o arquivo de configura√ß√£o: {e}")
def verify_credentials(username, password, USERS_FILE):
    """Verifica as credenciais do usu√°rio."""
    users = load_users(USERS_FILE)
    if username in users:
        hashed_password = hashlib.sha256(password.encode()).hexdigest()
        if isinstance(users[username], dict):
            return hashed_password == users[username].get("password", "")
        else:
            # Compatibilidade com formato antigo
            return hashed_password == users[username]
    return False

def get_user_type(username, USERS_FILE):
    """Obt√©m o tipo de usu√°rio."""
    users = load_users(USERS_FILE)
    if username in users:
        if isinstance(users[username], dict):
            return users[username].get("tipo", "Visualizador")
        else:
            # Compatibilidade com formato antigo - assume admin para usu√°rios antigos
            return "Administrador" if username == "admin" else "Visualizador"
    return "Visualizador"  # Padr√£o para seguran√ßa

def get_user_sector(username, USERS_FILE):
    """Obt√©m o setor do usu√°rio."""
    users = load_users(USERS_FILE)
    if username in users:
        if isinstance(users[username], dict):
            return users[username].get("setor", "Todos")
        else:
            # Compatibilidade com formato antigo
            return "Todos"
    return "Todos"  # Padr√£o para seguran√ßa

def generate_id():
    """Gera um ID √∫nico baseado na data e hora."""
    return datetime.now().strftime("%Y%m%d%H%M%S")

def format_date_as_month_year(date):
    """Formata a data como m√™s/ano."""
    try:
        return date.strftime("%b/%Y")
    except:
        try:
            return date.strftime("%m/%Y")
        except:
            return str(date)

def to_excel(df):
    """Converte um DataFrame para um arquivo Excel em mem√≥ria."""
    output = BytesIO()
    with pd.ExcelWriter(output, engine='xlsxwriter') as writer:
        df.to_excel(writer, sheet_name='Sheet1', index=False)
    processed_data = output.getvalue()
    return processed_data

def get_download_link(df, filename):
    """Gera um link para download de um arquivo Excel."""
    val = to_excel(df)
    b64 = base64.b64encode(val).decode()
    return f'<a href="data:application/octet-stream;base64,{b64}" download="{filename}" style="display: inline-block; padding: 0.5rem 1rem; background-color: #1E88E5; color: white; text-decoration: none; border-radius: 4px; font-weight: bold;">Baixar Excel</a>'

def base64_image(image_path):
    """Codifica uma imagem para base64."""
    try:
        with open(image_path, "rb") as img_file:
            return base64.b64encode(img_file.read()).decode()
    except FileNotFoundError:
        return ""  # Retornar uma string vazia se a imagem n√£o for encontrada

def create_chart(indicator_id, chart_type, INDICATORS_FILE, RESULTS_FILE, TEMA_PADRAO):
    """Cria um gr√°fico com base no tipo especificado."""
    # Carregar resultados
    results = load_results(RESULTS_FILE)

    # Filtrar resultados para o indicador espec√≠fico
    indicator_results = [r for r in results if r["indicator_id"] == indicator_id]

    if not indicator_results:
        return None

    # Preparar dados para o gr√°fico
    df = pd.DataFrame(indicator_results)
    df["data_referencia"] = pd.to_datetime(df["data_referencia"])
    df = df.sort_values("data_referencia")

    # Criar coluna formatada para exibi√ß√£o nos gr√°ficos
    df["data_formatada"] = df["data_referencia"].apply(format_date_as_month_year)

    # Encontrar o indicador para obter informa√ß√µes adicionais
    indicators = load_indicators(INDICATORS_FILE)
    indicator = next((ind for ind in indicators if ind["id"] == indicator_id), None)

    if not indicator:
        return None

    # Obter cores do tema padr√£o
    chart_colors = TEMA_PADRAO["chart_colors"]
    is_dark = TEMA_PADRAO["is_dark"]
    background_color = TEMA_PADRAO["background_color"]
    text_color = TEMA_PADRAO["text_color"]

    # Criar gr√°fico com base no tipo
    if chart_type == "Linha":
        fig = px.line(
            df,
            x="data_formatada",
            y="resultado",
            title=f"Evolu√ß√£o do Indicador: {indicator['nome']}",
            color_discrete_sequence=[chart_colors[0]],
            markers=True
        )
        # Adicionar linha de meta
        fig.add_hline(
            y=float(indicator["meta"]),
            line_dash="dash",
            line_color=chart_colors[4],
            annotation_text="Meta"
        )

    elif chart_type == "Barra":
        fig = px.bar(
            df,
            x="data_formatada",
            y="resultado",
            title=f"Evolu√ß√£o do Indicador: {indicator['nome']}",
            color_discrete_sequence=[chart_colors[0]]
        )
        # Adicionar linha de meta
        fig.add_hline(
            y=float(indicator["meta"]),
            line_dash="dash",
            line_color=chart_colors[4],
            annotation_text="Meta"
        )

    elif chart_type == "Pizza":
        # Para gr√°fico de pizza, usamos o √∫ltimo resultado vs meta
        last_result = df.iloc[-1]["resultado"]
        fig = px.pie(
            names=["Resultado Atual", "Meta"],
            values=[last_result, float(indicator["meta"])],
            title=f"√öltimo Resultado vs Meta: {indicator['nome']}",
            color_discrete_sequence=[chart_colors[0], chart_colors[1]],
            hole=0.4  # Transforma em donut chart para melhor visualiza√ß√£o
        )

    elif chart_type == "√Årea":
        fig = px.area(
            df,
            x="data_formatada",
            y="resultado",
            title=f"Evolu√ß√£o do Indicador: {indicator['nome']}",
            color_discrete_sequence=[chart_colors[0]]
        )
        # Adicionar linha de meta
        fig.add_hline(
            y=float(indicator["meta"]),
            line_dash="dash",
            line_color=chart_colors[4],
            annotation_text="Meta"
        )

    elif chart_type == "Dispers√£o":
        fig = px.scatter(
            df,
            x="data_formatada",
            y="resultado",
            title=f"Evolu√ß√£o do Indicador: {indicator['nome']}",
            color_discrete_sequence=[chart_colors[0]],
            size_max=15
        )
        # Adicionar linha de meta
        fig.add_hline(
            y=float(indicator["meta"]),
            line_dash="dash",
            line_color=chart_colors[4],
            annotation_text="Meta"
        )

    # Personalizar layout
    fig.update_layout(
        xaxis_title="Data de Refer√™ncia",
        yaxis_title="Resultado",
        template="plotly_white"
    )

    # Ajustar para tema escuro se necess√°rio
    if is_dark:
        fig.update_layout(
            template="plotly_dark",
            paper_bgcolor=background_color,
            plot_bgcolor="#1E1E1E",
            font=dict(color=text_color)
        )

    return fig

def show_login_page():
    """Mostra a p√°gina de login."""

    # CSS minimalista e eficaz
    st.markdown("""
    <style>
    /* Ocultar elementos padr√£o do Streamlit */
    #MainMenu, header, footer {display: none;}

    /* Estilo geral da p√°gina */
    .main {
        background-color: #f8f9fa;
        padding: 0;
    }

    /* Remover o menu de deploy */
    [data-testid="stToolbar"] {
        display: none !important;
    }

    /* Remover a borda colorida */
    [data-testid="stAppViewContainer"] {
        border: none !important;
    }

    /* Remover o rodap√© do Streamlit */
    footer {
        display: none !important;
    }

    /* Remover o √≠cone de hamb√∫rguer e menu principal */
    #MainMenu {
        visibility: hidden !important;
    }

    /* Remover o header com informa√ß√µes do Streamlit */
    header {
        display: none !important;
    }

    /* Estilo para inputs */
    .stTextInput > div > div > input {
        border-radius: 6px;
        border: 1px solid #E0E0E0;
        padding: 10px 15px;
        font-size: 15px;
    }

    /* Estilo para bot√£o de login */
    div[data-testid="stForm"] button[type="submit"] {
        background-color: #1E88E5;
        color: white;
        border: none;
        border-radius: 6px;
        padding: 10px 15px;
        font-size: 16px;
        font-weight: 500;
        width: 100%;
    }

    /* Espa√ßamento para o card */
    .block-container {
        padding-top: 2rem;
        padding-bottom: 2rem;
        max-width: 450px;
    }

    /* Estilo para mensagens */
    .stAlert {
        border-radius: 6px;
    }

    /* Fundo da p√°gina */
    .stApp {
        background-color: #f8f9fa;
    }
    </style>
    """, unsafe_allow_html=True)

    # Card de login usando elementos nativos
    with st.container():
        # Centralizar logo
        image_path = "logo.png"  # Verifique se o arquivo est√° no mesmo diret√≥rio ou ajuste o caminho
        if os.path.exists(image_path):
            st.markdown(f"<div style='text-align: center;'>{img_to_html(image_path)}</div>", unsafe_allow_html=True)
        else:
            st.markdown("<h1 style='text-align: center; font-size: 50px;'>üìä</h1>", unsafe_allow_html=True)

        # T√≠tulos centralizados
        st.markdown("<h1 style='text-align: center; font-size: 30px; color: #1E88E5;'>Portal de Indicadores</h1>",
                    unsafe_allow_html=True)
        st.markdown(
            "<h2 style='text-align: center; font-size: 26px; color: #546E7A; margin-bottom: 20px;'>Santa Casa - Po√ßos de Caldas</h2>",
            unsafe_allow_html=True)

        # Separador simples
        st.markdown("<hr style='height: 2px; background: #E0E0E0; border: none; margin: 20px 0;'>",
                    unsafe_allow_html=True)

        # Formul√°rio de login
        st.markdown("<h3 style='font-size: 18px; color: #455A64; margin-bottom: 15px;'>Acesse sua conta</h3>",
                    unsafe_allow_html=True)

        # Formul√°rio com componentes nativos
        with st.form("login_form"):
            username = st.text_input("Nome de usu√°rio", placeholder="Digite seu nome de usu√°rio")
            password = st.text_input("Senha", type="password", placeholder="Digite sua senha")

            submit = st.form_submit_button("Entrar")

            if submit:
                if username and password:
                    with st.spinner("Verificando..."):
                        time.sleep(0.5)

                        # Get the file paths from the global scope
                        DATA_DIR, INDICATORS_FILE, RESULTS_FILE, CONFIG_FILE, USERS_FILE, BACKUP_LOG_FILE, INDICATOR_LOG_FILE, USER_LOG_FILE, KEY_FILE = define_data_directories()

                        if verify_credentials(username, password, USERS_FILE):
                            st.session_state.authenticated = True
                            st.session_state.username = username
                            st.success("Login realizado com sucesso!")
                            time.sleep(0.8)
                            st.rerun()
                        else:
                            st.error("Usu√°rio ou senha incorretos.")
                else:
                    st.error("Por favor, preencha todos os campos.")

        # Rodap√© simples
        st.markdown(
            "<p style='text-align: center; font-size: 12px; color: #78909C; margin-top: 30px;'>¬© 2025 Portal de Indicadores - Santa Casa</p>",
            unsafe_allow_html=True)

def create_indicator(SETORES, TIPOS_GRAFICOS, INDICATORS_FILE, INDICATOR_LOG_FILE):
    """Mostra a p√°gina de cria√ß√£o de indicador."""
    st.markdown('<div class="dashboard-card">', unsafe_allow_html=True)
    st.header("Criar Novo Indicador")

    # Limpar vari√°veis de sess√£o espec√≠ficas do Dashboard
    if 'dashboard_data' in st.session_state:
        del st.session_state['dashboard_data']

    # Formul√°rio para criar indicador
    with st.form("criar_indicador"):
        nome = st.text_input("Nome do Indicador", placeholder="Ex: Taxa de Turnover")
        objetivo = st.text_area("Objetivo", placeholder="Descreva o objetivo deste indicador")
        calculo = st.text_area("F√≥rmula de C√°lculo",
                               placeholder="Ex: (N√∫mero de Demiss√µes / N√∫mero Total de Funcion√°rios) * 100")
        meta = st.number_input("Meta", step=0.01)
        comparacao = st.selectbox("Compara√ß√£o", ["Maior √© melhor", "Menor √© melhor"])
        tipo_grafico = st.selectbox("Tipo de Gr√°fico Padr√£o", TIPOS_GRAFICOS)
        responsavel = st.selectbox("Setor Respons√°vel", SETORES)

        submitted = st.form_submit_button("‚ûï Criar")

        if submitted:
            if nome and objetivo and calculo and meta:
                # Efeito de carregamento
                with st.spinner("Criando indicador..."):
                    time.sleep(0.5)  # Pequeno delay para efeito visual

                    # Carregar indicadores existentes
                    indicators = load_indicators(INDICATORS_FILE)

                    # Verificar se j√° existe um indicador com o mesmo nome
                    if any(ind["nome"] == nome for ind in indicators):
                        st.error(f"J√° existe um indicador com o nome '{nome}'.")
                    else:
                        # Criar novo indicador
                        new_indicator = {
                            "id": generate_id(),
                            "nome": nome,
                            "objetivo": objetivo,
                            "calculo": calculo,
                            "meta": meta,
                            "comparacao": comparacao,
                            "tipo_grafico": tipo_grafico,
                            "responsavel": responsavel,
                            "data_criacao": datetime.now().isoformat(),
                            "data_atualizacao": datetime.now().isoformat()
                        }

                        # Adicionar √† lista e salvar
                        indicators.append(new_indicator)
                        save_indicators(indicators, INDICATORS_FILE)
                        log_indicator_action("Indicador criado", new_indicator["id"], INDICATOR_LOG_FILE)  # Registrar a√ß√£o de cria√ß√£o

                        st.success(f"Indicador '{nome}' criado com sucesso!")
            else:
                st.warning("Todos os campos s√£o obrigat√≥rios.")
    st.markdown('</div>', unsafe_allow_html=True)

def edit_indicator(SETORES, TIPOS_GRAFICOS, INDICATORS_FILE, INDICATOR_LOG_FILE, RESULTS_FILE):
    """Mostra a p√°gina de edi√ß√£o de indicador."""
    st.markdown('<div class="dashboard-card">', unsafe_allow_html=True)
    st.header("Editar Indicador")

    # Carregar indicadores (sempre)
    st.session_state["indicators"] = load_indicators(INDICATORS_FILE)

    indicators = st.session_state["indicators"]

    if not indicators:
        st.info("Nenhum indicador cadastrado. Utilize a op√ß√£o 'Criar Indicador' para come√ßar.")
        st.markdown('</div>', unsafe_allow_html=True)
        return

    # Selecionar indicador para editar
    indicator_names = [ind["nome"] for ind in indicators]
    selected_indicator_name = st.selectbox("Selecione um indicador para editar:", indicator_names)

    # Encontrar o indicador selecionado
    selected_indicator = next((ind for ind in indicators if ind["nome"] == selected_indicator_name), None)

    if selected_indicator:
        # Formul√°rio para editar indicador
        with st.form(key=f"edit_form_{selected_indicator['id']}"):
            nome = st.text_input("Nome do Indicador", value=selected_indicator["nome"])
            objetivo = st.text_area("Objetivo", value=selected_indicator["objetivo"])
            calculo = st.text_area("F√≥rmula de C√°lculo", value=selected_indicator["calculo"])
            meta = st.number_input("Meta", value=float(selected_indicator["meta"]), step=0.01)
            comparacao = st.selectbox("Compara√ß√£o", ["Maior √© melhor", "Menor √© melhor"],
                                      index=0 if selected_indicator["comparacao"] == "Maior √© melhor" else 1)
            tipo_grafico = st.selectbox("Tipo de Gr√°fico Padr√£o", TIPOS_GRAFICOS,
                                        index=TIPOS_GRAFICOS.index(selected_indicator["tipo_grafico"]))
            responsavel = st.selectbox("Setor Respons√°vel", SETORES,
                                       index=SETORES.index(selected_indicator["responsavel"]))

            # Criar colunas para os bot√µes
            col1, col2, col3 = st.columns([1, 3, 1])  # Ajuste das propor√ß√µes

            # Aplicar estilo para alinhar o bot√£o "Excluir" √† direita na coluna 3
            st.markdown(
                """
                <style>
                [data-testid="stForm"] div:nth-child(3) > div:first-child {
                    text-align: right;
                }
                </style>
                """,
                unsafe_allow_html=True,
            )

            with col1:
                submitted = st.form_submit_button("üíæ Salvar")
            with col3:
                delete = st.form_submit_button("üóëÔ∏è Excluir", type="secondary")
                if delete:
                    st.session_state[f"deleting_indicator_{selected_indicator['id']}"] = True

            if submitted:
                if nome and objetivo and calculo and meta:
                    # Verificar se o nome foi alterado e se j√° existe outro indicador com esse nome
                    if nome != selected_indicator["nome"] and any(
                            ind["nome"] == nome for ind in indicators if ind["id"] != selected_indicator["id"]):
                        st.error(f"J√° existe um indicador com o nome '{nome}'.")
                    else:
                        # Atualizar indicador
                        for ind in indicators:
                            if ind["id"] == selected_indicator["id"]:
                                ind["nome"] = nome
                                ind["objetivo"] = objetivo
                                ind["calculo"] = calculo
                                ind["meta"] = meta
                                ind["comparacao"] = comparacao
                                ind["tipo_grafico"] = tipo_grafico
                                ind["responsavel"] = responsavel
                                ind["data_atualizacao"] = datetime.now().isoformat()

                        # Salvar altera√ß√µes
                        save_indicators(indicators, INDICATORS_FILE)
                        st.session_state["indicators"] = load_indicators(INDICATORS_FILE)  # Recarrega os indicadores
                        st.success(f"Indicador '{nome}' atualizado com sucesso!")
                        st.rerun()
                else:
                    st.warning("Todos os campos s√£o obrigat√≥rios.")

        # Bloco para exclus√£o
        if st.session_state.get(f"deleting_indicator_{selected_indicator['id']}", False):
            st.warning(f"Tem certeza que deseja excluir o indicador '{selected_indicator['nome']}'?")
            col1, col2 = st.columns(2)
            with col1:
                if st.button("‚úÖ Sim, Excluir", key=f"confirm_delete_{selected_indicator['id']}"):
                    # Excluir indicador
                    delete_indicator(selected_indicator["id"], INDICATORS_FILE, RESULTS_FILE, INDICATOR_LOG_FILE)
                    st.success(f"Indicador '{selected_indicator['nome']}' exclu√≠do com sucesso!")

                    # Remover o indicador da lista
                    indicators = [ind for ind in indicators if ind["id"] != selected_indicator["id"]]

                    # Atualizar o estado da sess√£o e o arquivo JSON
                    st.session_state["indicators"] = indicators
                    save_indicators(indicators, INDICATORS_FILE)

                     # Limpar estado de exclus√£o
                    if f"deleting_indicator_{selected_indicator['id']}" in st.session_state:
                        del st.session_state[f"deleting_indicator_{selected_indicator['id']}"]

                    # Recarrega a p√°gina para atualizar a lista
                    st.rerun()
            with col2:
                if st.button("‚ùå Cancelar", key=f"cancel_delete_{selected_indicator['id']}"):
                    st.info("Exclus√£o cancelada.")
                     # Limpar estado de exclus√£o
                    if f"deleting_indicator_{selected_indicator['id']}" in st.session_state:
                        del st.session_state[f"deleting_indicator_{selected_indicator['id']}"]
                    st.rerun()

    st.markdown('</div>', unsafe_allow_html=True)

def fill_indicator(SETORES, INDICATORS_FILE, RESULTS_FILE, TEMA_PADRAO):
    """Mostra a p√°gina de preenchimento de indicador."""
    st.markdown('<div class="dashboard-card">', unsafe_allow_html=True)
    st.header("Preencher Indicador")

    # Carregar indicadores
    indicators = load_indicators(INDICATORS_FILE)

    if not indicators:
        st.info("Nenhum indicador cadastrado. Utilize a op√ß√£o 'Criar Indicador' para come√ßar.")
        st.markdown('</div>', unsafe_allow_html=True)
        return

    # Filtrar indicadores pelo setor do usu√°rio (se for operador)
    user_type = st.session_state.user_type
    user_sector = st.session_state.user_sector
    # Nome do usu√°rio para registro em log
    user_name = st.session_state.get("user_name", "Usu√°rio n√£o identificado")

    if user_type == "Operador":
        indicators = [ind for ind in indicators if ind["responsavel"] == user_sector]
        if not indicators:
            st.info(f"N√£o h√° indicadores associados ao seu setor ({user_sector}).")
            st.markdown('</div>', unsafe_allow_html=True)
            return

    # Selecionar indicador para preencher
    indicator_names = [ind["nome"] for ind in indicators]
    selected_indicator_name = st.selectbox("Selecione um indicador para preencher:", indicator_names)
    selected_indicator = next((ind for ind in indicators if ind["nome"] == selected_indicator_name), None)

    if selected_indicator:
        st.subheader(f"Informa√ß√µes do Indicador: {selected_indicator['nome']}")
        col1, col2 = st.columns(2)
        with col1:
            st.markdown(f"**Objetivo:** {selected_indicator['objetivo']}")
            st.markdown(f"**F√≥rmula de C√°lculo:** {selected_indicator['calculo']}")
        with col2:
            st.markdown(f"**Meta:** {selected_indicator['meta']}")
            st.markdown(f"**Compara√ß√£o:** {selected_indicator['comparacao']}")
            st.markdown(f"**Setor Respons√°vel:** {selected_indicator['responsavel']}")
        st.markdown("---")

        # Carregar resultados existentes para verificar meses j√° preenchidos
        results = load_results(RESULTS_FILE)
        indicator_results = [r for r in results if r["indicator_id"] == selected_indicator["id"]]

        # Criar um conjunto de meses/anos j√° preenchidos
        filled_periods = set()
        for result in indicator_results:
            if "data_referencia" in result:
                try:
                    date_ref = pd.to_datetime(result["data_referencia"].split('T')[0])
                    filled_periods.add((date_ref.month, date_ref.year))
                except:
                    pass

        # Verificar se h√° per√≠odos dispon√≠veis para preenchimento
        current_year = datetime.now().year
        available_periods = []

        # Considerar os √∫ltimos 5 anos para poss√≠veis preenchimentos
        for year in range(current_year - 5, current_year + 1):
            for month in range(1, 13):
                # N√£o permitir preenchimento de meses futuros
                if year == current_year and month > datetime.now().month:
                    continue
                if (month, year) not in filled_periods:
                    available_periods.append((month, year))

        if not available_periods:
            st.info("Todos os per√≠odos relevantes j√° foram preenchidos para este indicador.")
        else:
            st.subheader("Adicionar Novo Resultado")
            with st.form("adicionar_resultado"):
                # Ordenar per√≠odos dispon√≠veis (mais recentes primeiro)
                available_periods.sort(key=lambda x: (x[1], x[0]), reverse=True)

                # Criar op√ß√µes para o selectbox
                period_options = [f"{datetime(year, month, 1).strftime('%B/%Y')}" for month, year in available_periods]
                selected_period = st.selectbox("Selecione o per√≠odo para preenchimento:", period_options)

                # Extrair m√™s e ano do per√≠odo selecionado
                selected_month, selected_year = None, None
                for i, period_str in enumerate(period_options):
                    if period_str == selected_period:
                        selected_month, selected_year = available_periods[i]
                        break

                resultado = st.number_input("Resultado", step=0.01)
                observacoes = st.text_area("Observa√ß√µes (opcional)",
                                           placeholder="Adicione informa√ß√µes relevantes sobre este resultado")
                # An√°lise Cr√≠tica 5W2H
                st.markdown("### An√°lise Cr√≠tica (5W2H)")
                st.markdown("""
                <div style="background-color: #f8f9fa; padding: 10px; border-radius: 5px; margin-bottom: 15px;">
                    <p style="margin: 0; font-size: 14px;">
                        A metodologia 5W2H ajuda a estruturar a an√°lise cr√≠tica de forma completa, 
                        abordando todos os aspectos relevantes da situa√ß√£o.
                    </p>
                </div>
                """, unsafe_allow_html=True)
                what = st.text_area("O que (What)",
                                    placeholder="O que est√° acontecendo? Qual √© a situa√ß√£o atual do indicador?")
                why = st.text_area("Por que (Why)",
                                   placeholder="Por que isso est√° acontecendo? Quais s√£o as causas?")
                who = st.text_area("Quem (Who)",
                                   placeholder="Quem √© respons√°vel? Quem est√° envolvido?")
                when = st.text_area("Quando (When)",
                                    placeholder="Quando isso aconteceu? Qual √© o prazo para resolu√ß√£o?")
                where = st.text_area("Onde (Where)",
                                     placeholder="Onde ocorre a situa√ß√£o? Em qual processo ou √°rea?")
                how = st.text_area("Como (How)",
                                   placeholder="Como resolver a situa√ß√£o? Quais a√ß√µes devem ser tomadas?")
                howMuch = st.text_area("Quanto custa (How Much)",
                                       placeholder="Quanto custar√° implementar a solu√ß√£o? Quais recursos s√£o necess√°rios?")
                submitted = st.form_submit_button("‚úîÔ∏è Salvar")

            if submitted and selected_month and selected_year:
                if resultado is not None:
                    data_referencia = datetime(selected_year, selected_month, 1).isoformat()
                    analise_critica = {
                        "what": what, "why": why, "who": who, "when": when,
                        "where": where, "how": how, "howMuch": howMuch
                    }

                    # Verificar o status de preenchimento da an√°lise cr√≠tica
                    campos_preenchidos = sum(1 for campo in analise_critica.values() if campo.strip())
                    total_campos = len(analise_critica)

                    if campos_preenchidos == 0:
                        status_analise = "‚ùå N√£o preenchida"
                    elif campos_preenchidos == total_campos:
                        status_analise = "‚úÖ Preenchida completamente"
                    else:
                        status_analise = f"‚ö†Ô∏è Preenchida parcialmente ({campos_preenchidos}/{total_campos})"

                    # Adicionar o status ao dicion√°rio para armazenar no JSON
                    analise_critica["status_preenchimento"] = status_analise

                    analise_critica_json = json.dumps(analise_critica)

                    # Verificar se j√° existe um resultado para este per√≠odo (n√£o deveria, mas por seguran√ßa)
                    existing_result = next(
                        (r for r in results
                         if r["indicator_id"] == selected_indicator["id"] and r["data_referencia"] == data_referencia),
                        None)

                    if existing_result:
                        st.warning(
                            f"J√° existe um resultado para {datetime(selected_year, selected_month, 1).strftime('%B/%Y')}. Este per√≠odo n√£o deveria estar dispon√≠vel para preenchimento.")
                    else:
                        new_result = {
                            "indicator_id": selected_indicator["id"],
                            "data_referencia": data_referencia,
                            "resultado": resultado,
                            "observacao": observacoes,
                            "analise_critica": analise_critica_json,
                            "data_criacao": datetime.now().isoformat(),
                            "data_atualizacao": datetime.now().isoformat(),
                            "usuario": user_name,  # REGISTRO
                            "status_analise": status_analise  # Adicionar status da an√°lise
                        }
                        results.append(new_result)
                        save_results(results, RESULTS_FILE)
                        st.success(
                            f"Resultado adicionado com sucesso para {datetime(selected_year, selected_month, 1).strftime('%B/%Y')}!")
                        # Recarregar a p√°gina para atualizar a lista de per√≠odos dispon√≠veis
                        st.rerun()
                else:
                    st.warning("Por favor, informe o resultado.")

        # Exibir resultados anteriores
        st.subheader("Resultados Anteriores")
        if indicator_results:
            df_results = pd.DataFrame(indicator_results)
            # Limpar as strings e converter para datetime
            df_results["data_referencia"] = df_results["data_referencia"].str.split('T').str[0]
            df_results["data_referencia"] = pd.to_datetime(df_results["data_referencia"], format='%Y-%m-%d')
            df_results = df_results.sort_values("data_referencia", ascending=False)
            df_display = df_results.copy()
            df_display["Per√≠odo"] = df_display["data_referencia"].apply(lambda x: x.strftime("%B/%Y"))
            df_display["Resultado"] = df_display["resultado"]
            if "observacao" in df_display.columns:
                df_display["Observa√ß√µes"] = df_display["observacao"]
            else:
                df_display["Observa√ß√µes"] = ""
            if "data_atualizacao" in df_display.columns:
                df_display["Data de Atualiza√ß√£o"] = pd.to_datetime(df_display["data_atualizacao"]).dt.strftime(
                    "%d/%m/%Y %H:%M")
            else:
                df_display["Data de Atualiza√ß√£o"] = "N/A"

            # Verificar o status da an√°lise cr√≠tica para cada resultado
            if "analise_critica" in df_display.columns:
                df_display["An√°lise Cr√≠tica"] = df_display.apply(
                    lambda row: row.get("status_analise", "") if "status_analise" in row else (
                        get_analise_status(row["analise_critica"]) if row["analise_critica"] else "‚ùå N√£o preenchida"
                    ), axis=1
                )
            else:
                df_display["An√°lise Cr√≠tica"] = "‚ùå N√£o preenchida"

            df_display = df_display[["Per√≠odo", "Resultado", "Observa√ß√µes", "An√°lise Cr√≠tica", "Data de Atualiza√ß√£o"]]
            st.dataframe(df_display, use_container_width=True)

            # Substituir a se√ß√£o de edi√ß√£o por visualiza√ß√£o apenas
            st.subheader("Visualizar An√°lise Cr√≠tica")
            periodos = df_results["data_referencia"].dt.strftime("%B/%Y").tolist()
            selected_periodo = st.selectbox("Selecione um per√≠odo:", periodos)
            selected_result = df_results[df_results["data_referencia"].dt.strftime("%B/%Y") == selected_periodo].iloc[0]

            has_analise = False
            analise_dict = {"what": "", "why": "", "who": "", "when": "", "where": "", "how": "", "howMuch": ""}
            if "analise_critica" in selected_result and selected_result["analise_critica"]:
                try:
                    analise_dict = json.loads(selected_result["analise_critica"])
                    has_analise = any(v.strip() for k, v in analise_dict.items() if k != "status_preenchimento")
                except:
                    pass

            with st.expander("An√°lise Cr√≠tica 5W2H", expanded=True):
                if has_analise:
                    st.info(f"Visualizando an√°lise cr√≠tica para o per√≠odo {selected_periodo}")

                    # Exibir campos como texto est√°tico, n√£o como campos edit√°veis
                    st.markdown("#### O que (What)")
                    st.text(analise_dict.get("what", ""))

                    st.markdown("#### Por que (Why)")
                    st.text(analise_dict.get("why", ""))

                    st.markdown("#### Quem (Who)")
                    st.text(analise_dict.get("who", ""))

                    st.markdown("#### Quando (When)")
                    st.text(analise_dict.get("when", ""))

                    st.markdown("#### Onde (Where)")
                    st.text(analise_dict.get("where", ""))

                    st.markdown("#### Como (How)")
                    st.text(analise_dict.get("how", ""))

                    st.markdown("#### Quanto custa (How Much)")
                    st.text(analise_dict.get("howMuch", ""))

                    # Exibir status do preenchimento
                    status = analise_dict.get("status_preenchimento", selected_result.get("status_analise", ""))
                    if status:
                        st.markdown(f"**Status do preenchimento:** {status}")
                else:
                    st.warning(f"N√£o h√° an√°lise cr√≠tica para o per√≠odo {selected_periodo}.")

            st.subheader("Gr√°fico de Evolu√ß√£o")
            fig = create_chart(selected_indicator["id"], selected_indicator["tipo_grafico"], INDICATORS_FILE, RESULTS_FILE, TEMA_PADRAO)
            if fig:
                st.plotly_chart(fig, use_container_width=True)
            else:
                st.info("N√£o foi poss√≠vel gerar o gr√°fico.")
            if st.button("üì§ Exportar para Excel"):
                export_df = df_display.copy()
                download_link = get_download_link(export_df,
                                                  f"resultados_{selected_indicator['nome'].replace(' ', '_')}.xlsx")
                st.markdown(download_link, unsafe_allow_html=True)
        else:
            st.info("Nenhum resultado registrado para este indicador.")

        # --------------- LOG DE PREENCHIMENTO (NOVO BLOCO) ---------------
        st.markdown("---")
        # Carregar todos os resultados ap√≥s poss√≠veis atualiza√ß√µes
        all_results = load_results(RESULTS_FILE)
        log_results = [r for r in all_results if r["indicator_id"] == selected_indicator["id"]]
        log_results = sorted(log_results, key=lambda x: x.get("data_atualizacao", ""), reverse=True)
        if log_results:
            log_df = pd.DataFrame(log_results)
            # Aplica a fun√ß√£o format_date para garantir formata√ß√£o consistente
            log_df["Data do Preenchimento"] = [
                format_date_as_month_year(r.get("data_atualizacao", r.get("data_criacao", datetime.now().isoformat())))
                for r in log_results]
            log_df["Valor Preenchido"] = log_df["resultado"]
            if "usuario" in log_df.columns:
                log_df["Usu√°rio"] = log_df["usuario"]
            else:
                log_df["Usu√°rio"] = user_name
            log_df["Per√≠odo"] = pd.to_datetime(log_df["data_referencia"]).dt.strftime("%B/%Y")

            # Adicionar status da an√°lise cr√≠tica ao log
            if "status_analise" in log_df.columns:
                log_df["Status An√°lise Cr√≠tica"] = log_df["status_analise"]
            else:
                # Verificar o status da an√°lise cr√≠tica para cada resultado
                log_df["Status An√°lise Cr√≠tica"] = log_df["analise_critica"].apply(get_analise_status)

            exibir_log = log_df[
                ["Per√≠odo", "Valor Preenchido", "Usu√°rio", "Status An√°lise Cr√≠tica", "Data do Preenchimento"]]
            exibir_log = exibir_log.drop_duplicates(subset=["Per√≠odo", "Valor Preenchido", "Usu√°rio"], keep='first')
        else:
            exibir_log = pd.DataFrame(
                columns=["Per√≠odo", "Valor Preenchido", "Usu√°rio", "Status An√°lise Cr√≠tica", "Data do Preenchimento"]
            )
        with st.expander("üìú Log de Preenchimentos (clique para visualizar)", expanded=False):
            if exibir_log.empty:
                st.info("Nenhum registro de preenchimento encontrado para este indicador.")
            else:
                st.dataframe(exibir_log, use_container_width=True)

    st.markdown('</div>', unsafe_allow_html=True)

def get_analise_status(analise_json):
    """Fun√ß√£o auxiliar para verificar o status de preenchimento da an√°lise cr√≠tica."""
    if not analise_json or analise_json.strip() == "{}":
        return "‚ùå N√£o preenchida"

    try:
        analise_dict = json.loads(analise_json)
        # Se j√° tiver o status salvo, retorna ele
        if "status_preenchimento" in analise_dict:
            return analise_dict["status_preenchimento"]

        # Caso contr√°rio, calcula o status
        campos_relevantes = ["what", "why", "who", "when", "where", "how", "howMuch"]
        campos_preenchidos = sum(
            1 for campo in campos_relevantes if campo in analise_dict and analise_dict[campo].strip())
        total_campos = len(campos_relevantes)

        if campos_preenchidos == 0:
            return "‚ùå N√£o preenchida"
        elif campos_preenchidos == total_campos:
            return "‚úÖ Preenchida completamente"
        else:
            return f"‚ö†Ô∏è Preenchida parcialmente ({campos_preenchidos}/{total_campos})"
    except:
        return "‚ùå N√£o preenchida"

def show_dashboard(INDICATORS_FILE, RESULTS_FILE, TEMA_PADRAO, SETORES):
    """Mostra o dashboard de indicadores."""
    st.markdown('<div class="dashboard-card">', unsafe_allow_html=True)
    st.header("Dashboard de Indicadores")

    # Carregar indicadores e resultados
    indicators = load_indicators(INDICATORS_FILE)
    results = load_results(RESULTS_FILE)

    if not indicators:
        st.info("Nenhum indicador cadastrado. Utilize a op√ß√£o 'Criar Indicador' para come√ßar.")
        st.markdown('</div>', unsafe_allow_html=True)
        return

    # Filtros em uma √∫nica linha
    col1, col2 = st.columns(2)

    with col1:
        # Filtrar por setor (considerando permiss√µes do usu√°rio)
        if st.session_state.user_type == "Operador" and st.session_state.user_sector != "Todos":
            # Operadores s√≥ podem ver seu pr√≥prio setor
            setor_filtro = st.session_state.user_sector
            st.info(f"Visualizando indicadores do setor: {setor_filtro}")
        else:
            # Administradores e Visualizadores podem selecionar o setor
            setores_disponiveis = ["Todos"] + list(set(ind["responsavel"] for ind in indicators))
            setor_filtro = st.selectbox("Filtrar por Setor:", setores_disponiveis)

    with col2:
        # Filtrar por status
        status_options = ["Todos", "Acima da Meta", "Abaixo da Meta", "Sem Resultados"]
        status_filtro = st.multiselect("Filtrar por Status:", status_options, default=["Todos"])

    # Aplicar filtro de setor
    if setor_filtro != "Todos":
        filtered_indicators = [ind for ind in indicators if ind["responsavel"] == setor_filtro]
    else:
        filtered_indicators = indicators

    # Se n√£o houver indicadores ap√≥s filtro
    if not filtered_indicators:
        st.warning(f"Nenhum indicador encontrado para o setor {setor_filtro}.")
        st.markdown('</div>', unsafe_allow_html=True)
        return

    # Resumo em cards horizontais
    st.subheader("Resumo dos Indicadores")

    # Calcular estat√≠sticas
    total_indicators = len(filtered_indicators)
    indicators_with_results = 0
    indicators_above_target = 0
    indicators_below_target = 0

    for ind in filtered_indicators:
        ind_results = [r for r in results if r["indicator_id"] == ind["id"]]
        if ind_results:
            indicators_with_results += 1

            # Pegar o resultado mais recente
            df_results = pd.DataFrame(ind_results)
            df_results["data_referencia"] = pd.to_datetime(df_results["data_referencia"])
            df_results = df_results.sort_values("data_referencia", ascending=False)

            last_result = float(df_results.iloc[0]["resultado"])
            meta = float(ind["meta"])

            if ind["comparacao"] == "Maior √© melhor":
                if last_result >= meta:
                    indicators_above_target += 1
                else:
                    indicators_below_target += 1
            else:  # Menor √© melhor
                if last_result <= meta:
                    indicators_above_target += 1
                else:
                    indicators_below_target += 1

    # Cards de resumo em uma √∫nica linha
    col1, col2, col3, col4 = st.columns(4)

    with col1:
        st.markdown(f"""
        <div style="background-color:#f8f9fa; padding:15px; border-radius:5px; text-align:center;">
            <h3 style="margin:0; color:#1E88E5;">{total_indicators}</h3>
            <p style="margin:0;">Total de Indicadores</p>
        </div>
        """, unsafe_allow_html=True)

    with col2:
        st.markdown(f"""
        <div style="background-color:#f8f9fa; padding:15px; border-radius:5px; text-align:center;">
            <h3 style="margin:0; color:#1E88E5;">{indicators_with_results}</h3>
            <p style="margin:0;">Com Resultados</p>
        </div>
        """, unsafe_allow_html=True)

    with col3:
        st.markdown(f"""
        <div style="background-color:#26A69A; padding:15px; border-radius:5px; text-align:center;">
            <h3 style="margin:0; color:white;">{indicators_above_target}</h3>
            <p style="margin:0; color:white;">Acima da Meta</p>
        </div>
        """, unsafe_allow_html=True)

    with col4:
        st.markdown(f"""
        <div style="background-color:#FF5252; padding:15px; border-radius:5px; text-align:center;">
            <h3 style="margin:0; color:white;">{indicators_below_target}</h3>
            <p style="margin:0; color:white;">Abaixo da Meta</p>
        </div>
        """, unsafe_allow_html=True)

    # Gr√°fico de status dos indicadores
    st.subheader("Status dos Indicadores")

    # Dados para o gr√°fico de pizza
    status_data = {
        "Status": ["Acima da Meta", "Abaixo da Meta", "Sem Resultados"],
        "Quantidade": [
            indicators_above_target,
            indicators_below_target,
            total_indicators - indicators_with_results
        ]
    }

    # Criar DataFrame
    df_status = pd.DataFrame(status_data)

    # Criar gr√°fico de pizza
    fig_status = px.pie(
        df_status,
        names="Status",
        values="Quantidade",
        title="Distribui√ß√£o de Status dos Indicadores",
        color="Status",
        color_discrete_map={
            "Acima da Meta": "#26A69A",
            "Abaixo da Meta": "#FF5252",
            "Sem Resultados": "#9E9E9E"
        }
    )

    # Mostrar gr√°fico
    st.plotly_chart(fig_status, use_container_width=True)

    # Mostrar indicadores individualmente em uma √∫nica coluna
    st.subheader("Indicadores")

    # Aplicar filtro de status aos indicadores
    indicator_data = []

    for ind in filtered_indicators:
        # Obter resultados do indicador
        ind_results = [r for r in results if r["indicator_id"] == ind["id"]]

        if ind_results:
            # Pegar o resultado mais recente
            df_results = pd.DataFrame(ind_results)
            df_results["data_referencia"] = pd.to_datetime(df_results["data_referencia"])
            df_results = df_results.sort_values("data_referencia", ascending=False)

            last_result = df_results.iloc[0]["resultado"]
            last_date = df_results.iloc[0]["data_referencia"]

            # Calcular status
            try:
                meta = float(ind["meta"])
                resultado = float(last_result)

                if ind["comparacao"] == "Maior √© melhor":
                    status = "Acima da Meta" if resultado >= meta else "Abaixo da Meta"
                else:  # Menor √© melhor
                    status = "Acima da Meta" if resultado <= meta else "Abaixo da Meta"

                # Calcular varia√ß√£o percentual
                variacao = ((resultado / meta) - 1) * 100
                if ind["comparacao"] == "Menor √© melhor":
                    variacao = -variacao  # Inverter para exibi√ß√£o correta

            except:
                status = "N/A"
                variacao = 0

            # Formatar data
            data_formatada = format_date_as_month_year(last_date)

        else:
            last_result = "N/A"
            data_formatada = "N/A"
            status = "Sem Resultados"
            variacao = 0

        # Adicionar √† lista de dados
        indicator_data.append({
            "indicator": ind,
            "last_result": last_result,
            "data_formatada": data_formatada,
            "status": status,
            "variacao": variacao,
            "results": ind_results
        })

    # Aplicar filtro de status se necess√°rio
    if status_filtro and "Todos" not in status_filtro:
        indicator_data = [d for d in indicator_data if d["status"] in status_filtro]

    # Se n√£o houver indicadores ap√≥s filtro de status
    if not indicator_data:
        st.warning("Nenhum indicador encontrado com os filtros selecionados.")
        st.markdown('</div>', unsafe_allow_html=True)
        return

    # Mostrar cada indicador individualmente em uma √∫nica coluna
    st.subheader("Indicadores")

    # Aplicar filtro de status aos indicadores
    indicator_data = []

    for ind in filtered_indicators:
        # Obter resultados do indicador
        ind_results = [r for r in results if r["indicator_id"] == ind["id"]]

        if ind_results:
            # Pegar o resultado mais recente
            df_results = pd.DataFrame(ind_results)
            df_results["data_referencia"] = pd.to_datetime(df_results["data_referencia"])
            df_results = df_results.sort_values("data_referencia", ascending=False)

            last_result = df_results.iloc[0]["resultado"]
            last_date = df_results.iloc[0]["data_referencia"]

            # Calcular status
            try:
                meta = float(ind["meta"])
                resultado = float(last_result)

                if ind["comparacao"] == "Maior √© melhor":
                    status = "Acima da Meta" if resultado >= meta else "Abaixo da Meta"
                else:  # Menor √© melhor
                    status = "Acima da Meta" if resultado <= meta else "Abaixo da Meta"

                # Calcular varia√ß√£o percentual
                variacao = ((resultado / meta) - 1) * 100
                if ind["comparacao"] == "Menor √© melhor":
                    variacao = -variacao  # Inverter para exibi√ß√£o correta

            except:
                status = "N/A"
                variacao = 0

            # Formatar data
            data_formatada = format_date_as_month_year(last_date)

        else:
            last_result = "N/A"
            data_formatada = "N/A"
            status = "Sem Resultados"
            variacao = 0

        # Adicionar √† lista de dados
        indicator_data.append({
            "indicator": ind,
            "last_result": last_result,
            "data_formatada": data_formatada,
            "status": status,
            "variacao": variacao,
            "results": ind_results
        })

    # Aplicar filtro de status se necess√°rio
    if status_filtro and "Todos" not in status_filtro:
        indicator_data = [d for d in indicator_data if d["status"] in status_filtro]

    # Se n√£o houver indicadores ap√≥s filtro de status
    if not indicator_data:
        st.warning("Nenhum indicador encontrado com os filtros selecionados.")
        st.markdown('</div>', unsafe_allow_html=True)
        return

    # Mostrar cada indicador em um card individual
    for i, data in enumerate(indicator_data):
        ind = data["indicator"]

        # Card para o indicador
        st.markdown(f"""
        <div style="background-color:#f8f9fa; padding:15px; border-radius:5px; margin-bottom:20px;">
            <h3 style="margin:0; color:#1E88E5;">{ind['nome']}</h3>
            <p style="margin:5px 0; color:#546E7A;">Setor: {ind['responsavel']}</p>
        </div>
        """, unsafe_allow_html=True)

        # Criar gr√°fico para o indicador
        if data["results"]:
            fig = create_chart(ind["id"], ind["tipo_grafico"], INDICATORS_FILE, RESULTS_FILE, TEMA_PADRAO)
            st.plotly_chart(fig, use_container_width=True)

            # Mostrar meta e √∫ltimo resultado
            col1, col2, col3 = st.columns(3)

            with col1:
                st.markdown(f"""
                <div style="background-color:white; padding:10px; border-radius:5px; text-align:center; border:1px solid #e0e0e0;">
                    <p style="margin:0; font-size:12px; color:#666;">Meta</p>
                    <p style="margin:0; font-weight:bold; font-size:18px;">{ind['meta']}</p>
                </div>
                """, unsafe_allow_html=True)

            with col2:
                status_color = "#26A69A" if data["status"] == "Acima da Meta" else "#FF5252"
                st.markdown(f"""
                <div style="background-color:white; padding:10px; border-radius:5px; text-align:center; border:1px solid #e0e0e0;">
                    <p style="margin:0; font-size:12px; color:#666;">√öltimo Resultado</p>
                    <p style="margin:0; font-weight:bold; font-size:18px; color:{status_color};">{data['last_result']}</p>
                </div>
                """, unsafe_allow_html=True)

            with col3:
                variacao_color = "#26A69A" if (data["variacao"] >= 0 and ind["comparacao"] == "Maior √© melhor") or \
                                            (data["variacao"] <= 0 and ind["comparacao"] == "Menor √© melhor") else "#FF5252"
                variacao_text = f"{data['variacao']:.2f}%" if isinstance(data['variacao'], (int, float)) else "N/A"
                st.markdown(f"""
                <div style="background-color:white; padding:10px; border-radius:5px; text-align:center; border:1px solid #e0e0e0;">
                    <p style="margin:0; font-size:12px; color:#666;">Varia√ß√£o vs Meta</p>
                    <p style="margin:0; font-weight:bold; font-size:18px; color:{variacao_color};">{variacao_text}</p>
                </div>
                """, unsafe_allow_html=True)

            # Expandir para mostrar s√©rie hist√≥rica e an√°lise cr√≠tica
            with st.expander("Ver S√©rie Hist√≥rica e An√°lise Cr√≠tica"):
                # Criar tabela de s√©rie hist√≥rica
                if data["results"]:
                    df_hist = pd.DataFrame(data["results"])
                    df_hist["data_referencia"] = pd.to_datetime(df_hist["data_referencia"])
                    df_hist = df_hist.sort_values("data_referencia", ascending=False)

                    # Adicionar colunas de status e an√°lise
                    df_hist["status"] = df_hist.apply(lambda row:
                                                      "Acima da Meta" if (float(row["resultado"]) >= float(
                                                          ind["meta"]) and ind["comparacao"] == "Maior √© melhor") or
                                                                         (float(row["resultado"]) <= float(
                                                                             ind["meta"]) and ind[
                                                                              "comparacao"] == "Menor √© melhor")
                                                      else "Abaixo da Meta", axis=1)

                    # Formatar para exibi√ß√£o - Corrigindo o erro da coluna 'observacoes'
                    df_display = df_hist[["data_referencia", "resultado", "status"]].copy()

                    # Verificar se a coluna 'observacao' existe no DataFrame
                    if "observacao" in df_hist.columns:
                        df_display["observacao"] = df_hist["observacao"]
                    else:
                        df_display["observacao"] = ""  # Adicionar coluna vazia se n√£o existir

                    df_display["data_referencia"] = df_display["data_referencia"].apply(
                        lambda x: x.strftime("%d/%m/%Y"))
                    df_display.columns = ["Data de Refer√™ncia", "Resultado", "Status", "Observa√ß√µes"]

                    st.dataframe(df_display, use_container_width=True)

                    # An√°lise de tend√™ncia
                    if len(df_hist) > 1:
                        # Verificar tend√™ncia dos √∫ltimos resultados
                        ultimos_resultados = df_hist.sort_values("data_referencia")["resultado"].astype(float).tolist()

                        if len(ultimos_resultados) >= 3:
                            # Verificar se os √∫ltimos 3 resultados est√£o melhorando ou piorando
                            if ind["comparacao"] == "Maior √© melhor":
                                tendencia = "crescente" if ultimos_resultados[-1] > ultimos_resultados[-2] > \
                                                           ultimos_resultados[-3] else \
                                    "decrescente" if ultimos_resultados[-1] < ultimos_resultados[-2] < \
                                                     ultimos_resultados[-3] else \
                                        "est√°vel"
                            else:  # Menor √© melhor
                                tendencia = "crescente" if ultimos_resultados[-1] < ultimos_resultados[-2] < \
                                                           ultimos_resultados[-3] else \
                                    "decrescente" if ultimos_resultados[-1] > ultimos_resultados[-2] > \
                                                     ultimos_resultados[-3] else \
                                        "est√°vel"

                            # Cor da tend√™ncia
                            tendencia_color = "#26A69A" if (tendencia == "crescente" and ind[
                                "comparacao"] == "Maior √© melhor") or \
                                                           (tendencia == "crescente" and ind[
                                                               "comparacao"] == "Menor √© melhor") else \
                                "#FF5252" if (tendencia == "decrescente" and ind["comparacao"] == "Maior √© melhor") or \
                                             (tendencia == "decrescente" and ind["comparacao"] == "Menor √© melhor") else \
                                    "#FFC107"  # Est√°vel

                            st.markdown(f"""
                            <div style="margin-top:15px;">
                                <h4>An√°lise de Tend√™ncia</h4>
                                <p>Este indicador apresenta uma tend√™ncia <span style="color:{tendencia_color}; font-weight:bold;">{tendencia}</span> nos √∫ltimos 3 per√≠odos.</p>
                            </div>
                            """, unsafe_allow_html=True)

                            # An√°lise cr√≠tica autom√°tica
                            st.markdown("<h4>An√°lise Autom√°tica</h4>", unsafe_allow_html=True)

                            # Gerar an√°lise com base na tend√™ncia e status
                            if tendencia == "crescente" and ind["comparacao"] == "Maior √© melhor":
                                st.success(
                                    "O indicador apresenta evolu√ß√£o positiva, com resultados crescentes nos √∫ltimos per√≠odos.")
                                if float(data["last_result"]) >= float(ind["meta"]):
                                    st.success(
                                        "O resultado atual est√° acima da meta estabelecida, demonstrando bom desempenho.")
                                else:
                                    st.warning(
                                        "Apesar da evolu√ß√£o positiva, o resultado ainda est√° abaixo da meta estabelecida.")
                            elif tendencia == "decrescente" and ind["comparacao"] == "Maior √© melhor":
                                st.error(
                                    "O indicador apresenta tend√™ncia de queda, o que √© preocupante para este tipo de m√©trica.")
                                if float(data["last_result"]) >= float(ind["meta"]):
                                    st.warning(
                                        "Embora o resultado atual ainda esteja acima da meta, a tend√™ncia de queda requer aten√ß√£o.")
                                else:
                                    st.error(
                                        "O resultado est√° abaixo da meta e com tend√™ncia de queda, exigindo a√ß√µes corretivas urgentes.")
                            elif tendencia == "crescente" and ind["comparacao"] == "Menor √© melhor":
                                st.error(
                                    "O indicador apresenta tend√™ncia de aumento, o que √© negativo para este tipo de m√©trica.")
                                if float(data["last_result"]) <= float(ind["meta"]):
                                    st.warning(
                                        "Embora o resultado atual ainda esteja dentro da meta, a tend√™ncia de aumento requer aten√ß√£o.")
                                else:
                                    st.error(
                                        "O resultado est√° acima da meta e com tend√™ncia de aumento, exigindo a√ß√µes corretivas urgentes.")
                            elif tendencia == "decrescente" and ind["comparacao"] == "Menor √© melhor":
                                st.success(
                                    "O indicador apresenta evolu√ß√£o positiva, com resultados decrescentes nos √∫ltimos per√≠odos.")
                                if float(data["last_result"]) <= float(ind["meta"]):
                                    st.success(
                                        "O resultado atual est√° dentro da meta estabelecida, demonstrando bom desempenho.")
                                else:
                                    st.warning(
                                        "Apesar da evolu√ß√£o positiva, o resultado ainda est√° acima da meta estabelecida.")
                            else:  # Est√°vel
                                if (float(data["last_result"]) >= float(ind["meta"]) and ind[
                                    "comparacao"] == "Maior √© melhor") or \
                                        (float(data["last_result"]) <= float(ind["meta"]) and ind[
                                            "comparacao"] == "Menor √© melhor"):
                                    st.info("O indicador apresenta estabilidade e est√° dentro da meta estabelecida.")
                                else:
                                    st.warning(
                                        "O indicador apresenta estabilidade, por√©m est√° fora da meta estabelecida.")
                        else:
                            st.info(
                                "N√£o h√° dados suficientes para an√°lise de tend√™ncia (m√≠nimo de 3 per√≠odos necess√°rios).")
                    else:
                        st.info("N√£o h√° dados hist√≥ricos suficientes para an√°lise de tend√™ncia.")

                    # Adicionar an√°lise cr√≠tica no formato 5W2H
                    st.markdown("<h4>An√°lise Cr√≠tica 5W2H</h4>", unsafe_allow_html=True)

                    # Verificar se existe an√°lise cr√≠tica para o √∫ltimo resultado
                    ultimo_resultado = df_hist.iloc[0]

                    # Verificar se o resultado tem an√°lise cr√≠tica
                    has_analysis = False

                    # Verificar se a an√°lise cr√≠tica existe nos dados
                    if "analise_critica" in ultimo_resultado:
                        analise = ultimo_resultado["analise_critica"]
                        has_analysis = analise is not None and analise != ""

                    if has_analysis:
                        # Exibir an√°lise cr√≠tica existente
                        analise = ultimo_resultado["analise_critica"]

                        # Tentar converter de JSON se for uma string
                        if isinstance(analise, str):
                            try:
                                analise_dict = json.loads(analise)
                            except:
                                analise_dict = {
                                    "what": "", "why": "", "who": "", "when": "", "where": "",
                                    "how": "", "howMuch": ""
                                }
                        else:
                            analise_dict = analise

                        # Exibir os campos da an√°lise cr√≠tica
                        st.markdown("**O que (What):** " + analise_dict.get("what", ""))
                        st.markdown("**Por que (Why):** " + analise_dict.get("why", ""))
                        st.markdown("**Quem (Who):** " + analise_dict.get("who", ""))
                        st.markdown("**Quando (When):** " + analise_dict.get("when", ""))
                        st.markdown("**Onde (Where):** " + analise_dict.get("where", ""))
                        st.markdown("**Como (How):** " + analise_dict.get("how", ""))
                        st.markdown("**Quanto custa (How Much):** " + analise_dict.get("howMuch", ""))
                    else:
                        # Mostrar mensagem informando que n√£o h√° an√°lise cr√≠tica
                        st.info(
                            "N√£o h√° an√°lise cr√≠tica registrada para o √∫ltimo resultado. Utilize a op√ß√£o 'Preencher Indicador' para adicionar uma an√°lise cr√≠tica no formato 5W2H.")

                        # Explicar o formato 5W2H
                        with st.expander("O que √© a an√°lise 5W2H?"):
                            st.markdown("""
                            **5W2H** √© uma metodologia de an√°lise que ajuda a estruturar o pensamento cr√≠tico sobre um problema ou situa√ß√£o:

                            - **What (O qu√™)**: O que est√° acontecendo? Qual √© o problema ou situa√ß√£o?
                            - **Why (Por qu√™)**: Por que isso est√° acontecendo? Quais s√£o as causas?
                            - **Who (Quem)**: Quem √© respons√°vel? Quem est√° envolvido?
                            - **When (Quando)**: Quando isso aconteceu? Qual √© o prazo para resolu√ß√£o?
                            - **Where (Onde)**: Onde ocorre o problema? Em qual setor ou processo?
                            - **How (Como)**: Como resolver o problema? Quais a√ß√µes devem ser tomadas?
                            - **How Much (Quanto custa)**: Quanto custar√° implementar a solu√ß√£o? Quais recursos s√£o necess√°rios?

                            Esta metodologia ajuda a garantir que todos os aspectos importantes sejam considerados na an√°lise e no plano de a√ß√£o.
                            """)
                else:
                    st.info("N√£o h√° resultados registrados para este indicador.")
        else:
            # Indicador sem resultados
            st.info("Este indicador ainda n√£o possui resultados registrados.")

            # Mostrar meta
            st.markdown(f"""
            <div style="background-color:white; padding:10px; border-radius:5px; text-align:center; border:1px solid #e0e0e0; width: 200px; margin: 10px auto;">
                <p style="margin:0; font-size:12px; color:#666;">Meta</p>
                <p style="margin:0; font-weight:bold; font-size:18px;">{ind['meta']}</p>
            </div>
            """, unsafe_allow_html=True)

        # Separador entre indicadores
        st.markdown("<hr style='margin: 30px 0; border-color: #e0e0e0;'>", unsafe_allow_html=True)

    # Bot√£o para exportar todos os dados
    if st.button("üì§ Exportar Tudo"):
        # Preparar dados para exporta√ß√£o
        export_data = []

        for data in indicator_data:
            ind = data["indicator"]

            # Adicionar √† lista de dados
            export_data.append({
                "Nome": ind["nome"],
                "Setor": ind["responsavel"],
                "Meta": ind["meta"],
                "√öltimo Resultado": data["last_result"],
                "Per√≠odo": data["data_formatada"],
                "Status": data["status"],
                "Varia√ß√£o (%)": f"{data['variacao']:.2f}%" if isinstance(data['variacao'], (int, float)) else "N/A"
            })

        # Criar DataFrame
        df_export = pd.DataFrame(export_data)

        # Criar link de download
        download_link = get_download_link(df_export, "indicadores_dashboard.xlsx")
        st.markdown(download_link, unsafe_allow_html=True)

    st.markdown('</div>', unsafe_allow_html=True)


def show_overview(INDICATORS_FILE, RESULTS_FILE):
    """Mostra a vis√£o geral dos indicadores."""
    st.markdown('<div class="dashboard-card">', unsafe_allow_html=True)
    st.header("Vis√£o Geral dos Indicadores")

    # Carregar indicadores e resultados
    indicators = load_indicators(INDICATORS_FILE)
    results = load_results(RESULTS_FILE)

    if not indicators:
        st.info("Nenhum indicador cadastrado. Utilize a op√ß√£o 'Criar Indicador' para come√ßar.")
        st.markdown('</div>', unsafe_allow_html=True)
        return

    # Filtros
    col1, col2 = st.columns(2)

    with col1:
        # Filtro por setor
        setores_disponiveis = sorted(list(set([ind["responsavel"] for ind in indicators])))
        setor_filtro = st.multiselect(
            "Filtrar por Setor",
            options=["Todos"] + setores_disponiveis,
            default=["Todos"]
        )

    with col2:
        # Filtro por status (acima/abaixo da meta)
        status_filtro = st.multiselect(
            "Status",
            options=["Todos", "Acima da Meta", "Abaixo da Meta", "Sem Resultados"],
            default=["Todos"]
        )

    # Aplicar filtros
    filtered_indicators = indicators

    if setor_filtro and "Todos" not in setor_filtro:
        filtered_indicators = [ind for ind in filtered_indicators if ind["responsavel"] in setor_filtro]

    # Criar DataFrame para vis√£o geral
    overview_data = []

    for ind in filtered_indicators:
        # Obter resultados para este indicador
        ind_results = [r for r in results if r["indicator_id"] == ind["id"]]

        if ind_results:
            # Ordenar por data e pegar o mais recente
            df_results = pd.DataFrame(ind_results)
            df_results["data_referencia"] = pd.to_datetime(df_results["data_referencia"])
            df_results = df_results.sort_values("data_referencia", ascending=False)

            last_result = df_results.iloc[0]["resultado"]
            last_date = df_results.iloc[0]["data_referencia"]

            # Calcular status
            try:
                meta = float(ind["meta"])
                resultado = float(last_result)

                if ind["comparacao"] == "Maior √© melhor":
                    status = "Acima da Meta" if resultado >= meta else "Abaixo da Meta"
                else:  # Menor √© melhor
                    status = "Acima da Meta" if resultado <= meta else "Abaixo da Meta"

                # Calcular varia√ß√£o percentual
                variacao = ((resultado / meta) - 1) * 100
                if ind["comparacao"] == "Menor √© melhor":
                    variacao = -variacao  # Inverter para exibi√ß√£o correta

            except:
                status = "N/A"
                variacao = 0

            # Formatar data
            data_formatada = format_date_as_month_year(last_date)

        else:
            last_result = "N/A"
            data_formatada = "N/A"
            status = "Sem Resultados"
            variacao = 0

        # Adicionar √† lista de dados
        overview_data.append({
            "Nome": ind["nome"],
            "Setor": ind["responsavel"],
            "Meta": ind["meta"],
            "√öltimo Resultado": last_result,
            "Per√≠odo": data_formatada,
            "Status": status,
            "Varia√ß√£o (%)": f"{variacao:.2f}%" if isinstance(variacao, (int, float)) else "N/A"
        })

    # Aplicar filtro de status
    if status_filtro and "Todos" not in status_filtro:
        overview_data = [d for d in overview_data if d["Status"] in status_filtro]

    # Criar DataFrame
    df_overview = pd.DataFrame(overview_data)

    if not df_overview.empty:
        # Exibir vis√£o geral
        st.dataframe(df_overview, use_container_width=True)

        # Bot√£o para exportar dados
        if st.button("üì§ Exportar para Excel"):
            download_link = get_download_link(df_overview, "visao_geral_indicadores.xlsx")
            st.markdown(download_link, unsafe_allow_html=True)

        # Gr√°fico de resumo por setor
        st.subheader("Resumo por Setor")

        # Contar indicadores por setor
        setor_counts = df_overview["Setor"].value_counts().reset_index()
        setor_counts.columns = ["Setor", "Quantidade de Indicadores"]

        # Gr√°fico de barras para contagem por setor
        fig_setor = px.bar(
            setor_counts,
            x="Setor",
            y="Quantidade de Indicadores",
            title="Quantidade de Indicadores por Setor",
            color="Setor"
        )

        st.plotly_chart(fig_setor, use_container_width=True)

        # Gr√°fico de status
        st.subheader("Status dos Indicadores")

        # Contar indicadores por status
        status_counts = df_overview["Status"].value_counts().reset_index()
        status_counts.columns = ["Status", "Quantidade"]

        # Gr√°fico de pizza para status
        fig_status = px.pie(
            status_counts,
            names="Status",
            values="Quantidade",
            title="Distribui√ß√£o de Status dos Indicadores",
            color="Status",
            color_discrete_map={
                "Acima da Meta": "#26A69A",
                "Abaixo da Meta": "#FF5252",
                "Sem Resultados": "#9E9E9E"
            }
        )

        st.plotly_chart(fig_status, use_container_width=True)
    else:
        st.warning("Nenhum indicador encontrado com os filtros selecionados.")

    st.markdown('</div>', unsafe_allow_html=True)


def show_settings(USERS_FILE, INDICATORS_FILE, RESULTS_FILE, BACKUP_LOG_FILE, INDICATOR_LOG_FILE, USER_LOG_FILE,
                  KEY_FILE, cipher, CONFIG_FILE):
    """Mostra a p√°gina de configura√ß√µes."""
    st.markdown('<div class="dashboard-card">', unsafe_allow_html=True)
    st.header("Configura√ß√µes")

    # Cria o diret√≥rio de backups se n√£o existir
    if not os.path.exists("backups"):
        os.makedirs("backups")

    # Carregar configura√ß√µes
    config = load_config(CONFIG_FILE)

    # Informa√ß√µes sobre o sistema
    st.subheader("Informa√ß√µes do Sistema")

    col1, col2 = st.columns(2)

    with col1:
        st.markdown("""
        **Vers√£o do Portal:** 1.2.0

        **Data da √öltima Atualiza√ß√£o:** 22/04/2025

        **Desenvolvido por:** Equipe de Desenvolvimento
        """)

    with col2:
        st.markdown("""
        **Suporte T√©cnico:**

        Email: suporte@portalindicadores.com

        Telefone: (11) 1234-5678
        """)

    # Hor√°rio de backup autom√°tico
    st.subheader("Backup Autom√°tico")

    # Se o hor√°rio de backup n√£o estiver definido, define como 00:00
    if "backup_hour" not in config:
        config["backup_hour"] = "00:00"

    # Converte o hor√°rio para um objeto datetime.time
    try:
        backup_hour = datetime.strptime(config["backup_hour"], "%H:%M").time()
    except ValueError:
        # Se o formato estiver incorreto, define como 00:00 e salva no arquivo
        config["backup_hour"] = "00:00"
        save_config(config, CONFIG_FILE)
        backup_hour = datetime.time(0, 0)

    new_backup_hour = st.time_input("Hor√°rio do backup autom√°tico", backup_hour)

    # Salvar novo hor√°rio de backup
    if new_backup_hour != backup_hour:
        config["backup_hour"] = new_backup_hour.strftime("%H:%M")
        save_config(config, CONFIG_FILE)
        st.success("Hor√°rio de backup autom√°tico atualizado com sucesso!")

    # Mostrar data do √∫ltimo backup autom√°tico
    if "last_backup_date" in config:
        st.markdown(f"**√öltimo backup autom√°tico:** {config['last_backup_date']}")
    else:
        st.markdown("**√öltimo backup autom√°tico:** Nunca executado")

    # Bot√£o para criar backup manual (fora do expander)
    if st.button("‚ü≥ Criar novo backup manual", help="Cria um backup manual de todos os dados do sistema."):
        with st.spinner("Criando backup manual..."):
            backup_file = backup_data(INDICATORS_FILE, RESULTS_FILE, CONFIG_FILE, USERS_FILE, BACKUP_LOG_FILE,
                                      INDICATOR_LOG_FILE, USER_LOG_FILE, cipher, tipo_backup="user")
            if backup_file:
                st.success(f"Backup manual criado: {backup_file}")
            else:
                st.error("Falha ao criar o backup manual.")

    # Bot√£o para restaurar backup (fora do expander)
    backup_files = [f for f in os.listdir("backups") if f.startswith("backup_") and f.endswith(".bkp")]
    if backup_files:
        selected_backup = st.selectbox("Selecione o backup para restaurar", backup_files)
        if st.button("‚öôÔ∏è Restaurar arquivo de backup Ô∏è",
                     help="Restaura os dados do sistema a partir de um arquivo de backup."):
            # Criar um backup antes de restaurar
            with st.spinner("Criando backup de seguran√ßa..."):
                backup_file_antes_restauracao = backup_data(INDICATORS_FILE, RESULTS_FILE, CONFIG_FILE, USERS_FILE,
                                                            BACKUP_LOG_FILE, INDICATOR_LOG_FILE, USER_LOG_FILE,
                                                            cipher, tipo_backup="seguranca")
                if backup_file_antes_restauracao:
                    st.success(f"Backup de seguran√ßa criado: {backup_file_antes_restauracao}")
                else:
                    st.error("Falha ao criar o backup de seguran√ßa.")

            # Restaurar o backup
            try:
                with st.spinner("Restaurando backup..."):
                    if restore_data(os.path.join("backups", selected_backup), INDICATORS_FILE, RESULTS_FILE, CONFIG_FILE, USERS_FILE,
                                    BACKUP_LOG_FILE, INDICATOR_LOG_FILE, USER_LOG_FILE, cipher):
                        st.success("Backup restaurado com sucesso!")
                    else:
                        st.error("Falha ao restaurar o backup.")
            except Exception as e:
                st.error(f"Ocorreu um erro durante a restaura√ß√£o: {e}")
    else:
        st.info("Nenhum arquivo de backup encontrado.")

    # Bot√£o para limpar dados (apenas para admin)
    if st.session_state.username == "admin":
        st.subheader("Administra√ß√£o do Sistema")

        # Expander para as op√ß√µes de limpeza da base
        with st.expander("Op√ß√µes Avan√ßadas de Limpeza"):
            st.warning("‚ö†Ô∏è Estas op√ß√µes podem causar perda de dados. Use com cuidado.")

            if st.button("üóëÔ∏è Limpar resultados", help="Exclui todos os resultados dos indicadores."):
                try:
                    if "confirm_limpar_resultados" not in st.session_state:
                        st.session_state.confirm_limpar_resultados = False

                    if not st.session_state.confirm_limpar_resultados:
                        st.warning(
                            "Tem certeza que deseja limpar todos os resultados? Esta a√ß√£o n√£o pode ser desfeita.")
                        st.session_state.confirm_limpar_resultados = True
                        st.rerun()
                    else:
                        with st.spinner("Limpando resultados..."):
                            try:
                                with open(RESULTS_FILE, "w") as f:
                                    json.dump([], f)
                                st.success("Resultados exclu√≠dos com sucesso!")
                            except Exception as e:
                                st.error(f"Erro ao excluir resultados: {e}")
                        st.session_state.confirm_limpar_resultados = False
                except Exception as e:
                    st.error(f"Ocorreu um erro ao limpar os resultados: {e}")

            if st.button("üßπ Excluir tudo!", help="Exclui todos os indicadores e resultados do sistema."):
                try:
                    if "confirm_limpar_tudo" not in st.session_state:
                        st.session_state.confirm_limpar_tudo = False

                    if not st.session_state.confirm_limpar_tudo:
                        st.warning(
                            "Tem certeza que deseja limpar todos os indicadores e resultados? Esta a√ß√£o n√£o pode ser desfeita.")
                        st.session_state.confirm_limpar_tudo = True
                        st.rerun()
                    else:
                        with st.spinner("Limpando tudo..."):
                            try:
                                with open(INDICATORS_FILE, "w") as f:
                                    json.dump([], f)
                                with open(RESULTS_FILE, "w") as f:
                                    json.dump([], f)
                                st.success("Indicadores e resultados exclu√≠dos com sucesso!")
                            except Exception as e:
                                st.error(f"Erro ao excluir indicadores e resultados: {e}")
                        st.session_state.confirm_limpar_tudo = False
                except Exception as e:
                    st.error(f"Ocorreu um erro ao excluir tudo: {e}")

    st.markdown('</div>', unsafe_allow_html=True)


def show_user_management(SETORES, USERS_FILE, USER_LOG_FILE):
    """Mostra a p√°gina de gerenciamento de usu√°rios."""
    st.markdown('<div class="dashboard-card">', unsafe_allow_html=True)
    st.header("Gerenciamento de Usu√°rios")

    users = load_users(USERS_FILE)

    # Verificar e migrar usu√°rios para o novo formato se necess√°rio
    migrated = False
    for user, data in list(users.items()):
        if not isinstance(data, dict):
            users[user] = {
                "password": data,
                "tipo": "Administrador" if user == "admin" else "Visualizador",
                "setor": "Todos",
                "nome_completo": "",
                "email": ""
            }
            migrated = True
        elif "setor" not in data:
            users[user]["setor"] = "Todos"
            migrated = True
        elif "nome_completo" not in data:
            users[user]["nome_completo"] = ""
            migrated = True
        elif "email" not in data:
            users[user]["email"] = ""
            migrated = True

    if migrated:
        save_users(users, USERS_FILE)
        st.success("Dados de usu√°rios foram atualizados para o novo formato.")

    # Estat√≠sticas de usu√°rios
    total_users = len(users)
    admin_count = sum(
        1 for user, data in users.items() if isinstance(data, dict) and data.get("tipo") == "Administrador")
    operator_count = sum(1 for user, data in users.items() if isinstance(data, dict) and data.get("tipo") == "Operador")
    viewer_count = sum(
        1 for user, data in users.items() if isinstance(data, dict) and data.get("tipo") == "Visualizador")

    # Mostrar estat√≠sticas em cards
    st.subheader("Vis√£o Geral de Usu√°rios")

    col1, col2, col3, col4 = st.columns(4)

    with col1:
        st.markdown(f"""
        <div style="background-color:#f8f9fa; padding:15px; border-radius:5px; text-align:center;">
            <h3 style="margin:0; color:#1E88E5;">{total_users}</h3>
            <p style="margin:0;">Total de Usu√°rios</p>
        </div>
        """, unsafe_allow_html=True)

    with col2:
        st.markdown(f"""
        <div style="background-color:#26A69A; padding:15px; border-radius:5px; text-align:center;">
            <h3 style="margin:0; color:white;">{admin_count}</h3>
            <p style="margin:0; color:white;">Administradores</p>
        </div>
        """, unsafe_allow_html=True)

    with col3:
        st.markdown(f"""
        <div style="background-color:#FFC107; padding:15px; border-radius:5px; text-align:center;">
            <h3 style="margin:0; color:white;">{operator_count}</h3>
            <p style="margin:0; color:white;">Operadores</p>
        </div>
        """, unsafe_allow_html=True)

    with col4:
        st.markdown(f"""
        <div style="background-color:#7E57C2; padding:15px; border-radius:5px; text-align:center;">
            <h3 style="margin:0; color:white;">{viewer_count}</h3>
            <p style="margin:0; color:white;">Visualizadores</p>
        </div>
        """, unsafe_allow_html=True)

    # Criar novo usu√°rio
    st.subheader("Adicionar Novo Usu√°rio")

    with st.form("add_user_form"):
        # Informa√ß√µes pessoais
        st.markdown("#### Informa√ß√µes Pessoais")

        col1, col2 = st.columns(2)
        with col1:
            nome_completo = st.text_input("Nome Completo", placeholder="Digite o nome completo do usu√°rio")
            email = st.text_input("Email", placeholder="Digite o email do usu√°rio")

        with col2:
            # Adicionar sele√ß√£o de tipo de usu√°rio
            user_type = st.selectbox(
                "Tipo de Usu√°rio",
                options=["Administrador", "Operador", "Visualizador"],
                index=2,  # Padr√£o: Visualizador
                help="Administrador: acesso total; Operador: gerencia indicadores de um setor; Visualizador: apenas visualiza√ß√£o"
            )

            # Adicionar sele√ß√£o de setor (relevante principalmente para Operadores)
            user_sector = st.selectbox(
                "Setor",
                options=["Todos"] + SETORES,
                index=0,  # Padr√£o: Todos
                help="Para Operadores, define o setor que podem gerenciar. Administradores t√™m acesso a todos os setores."
            )

        # Informa√ß√µes de acesso
        st.markdown("#### Informa√ß√µes de Acesso")

        col1, col2 = st.columns(2)
        with col1:
            login = st.text_input("Login", placeholder="Digite o login para acesso ao sistema")

        with col2:
            new_password = st.text_input("Senha", type="password", placeholder="Digite a senha")
            confirm_password = st.text_input("Confirmar Senha", type="password", placeholder="Confirme a senha")

        # Mostrar explica√ß√£o dos tipos de usu√°rio
        st.markdown("""
        <div style="background-color:#f8f9fa; padding:10px; border-radius:5px; margin-top:10px;">
            <p style="margin:0; font-size:14px;"><strong>Tipos de usu√°rio:</strong></p>
            <ul style="margin:5px 0 0 15px; padding:0; font-size:13px;">
                <li><strong>Administrador:</strong> Acesso total ao sistema</li>
                <li><strong>Operador:</strong> Gerencia indicadores de um setor espec√≠fico</li>
                <li><strong>Visualizador:</strong> Apenas visualiza indicadores e resultados</li>
            </ul>
        </div>
        """, unsafe_allow_html=True)

        # Desabilitar a op√ß√£o "Todos" para Operadores
        if user_type == "Operador" and user_sector == "Todos":
            st.warning("‚ö†Ô∏è Operadores devem ser associados a um setor espec√≠fico.")

        submit = st.form_submit_button("‚ûï Adicionar")

    if submit:
        # Validar campos obrigat√≥rios
        if not login or not new_password:
            st.error("‚ùå Login e senha s√£o obrigat√≥rios.")
        elif login in users:
            st.error(f"‚ùå O login '{login}' j√° existe.")
        elif new_password != confirm_password:
            st.error("‚ùå As senhas n√£o coincidem.")
        elif user_type == "Operador" and user_sector == "Todos":
            st.error("‚ùå Operadores devem ser associados a um setor espec√≠fico.")
        elif not nome_completo:
            st.error("‚ùå Nome completo √© obrigat√≥rio.")
        elif email and "@" not in email:  # Valida√ß√£o b√°sica de email
            st.error("‚ùå Formato de email inv√°lido.")
        else:
            # Criar novo usu√°rio com todos os campos
            users[login] = {
                "password": hashlib.sha256(new_password.encode()).hexdigest(),
                "tipo": user_type,
                "setor": user_sector,
                "nome_completo": nome_completo,
                "email": email,
                "data_criacao": datetime.now().isoformat()
            }
            save_users(users, USERS_FILE)
            log_user_action("Usu√°rio criado", login, USER_LOG_FILE)  # Registrar a√ß√£o de cria√ß√£o
            st.success(
                f"‚úÖ Usu√°rio '{nome_completo}' (login: {login}) adicionado com sucesso como {user_type} do setor {user_sector}!")
            time.sleep(1)
            st.rerun()

    # Listar e gerenciar usu√°rios existentes
    st.subheader("Usu√°rios Cadastrados")

    # Adicionar filtros
    col1, col2 = st.columns(2)
    with col1:
        filter_type = st.multiselect(
            "Filtrar por Tipo",
            options=["Todos", "Administrador", "Operador", "Visualizador"],
            default=["Todos"]
        )

    with col2:
        filter_sector = st.multiselect(
            "Filtrar por Setor",
            options=["Todos"] + SETORES,
            default=["Todos"]
        )

    # Adicionar campo de busca
    search_query = st.text_input("üîç Buscar usu√°rio por nome, login ou email", placeholder="Digite para buscar...")

    # Aplicar filtros
    filtered_users = {}
    for user, data in users.items():
        # Obter tipo e setor
        if isinstance(data, dict):
            user_type = data.get("tipo", "Visualizador")
            user_sector = data.get("setor", "Todos")
            nome_completo = data.get("nome_completo", "")
            email = data.get("email", "")
            data_criacao = data.get("data_criacao", "N/A")
            if data_criacao != "N/A":
                try:
                    data_criacao = datetime.fromisoformat(data_criacao).strftime("%d/%m/%Y")
                except:
                    pass
        else:
            user_type = "Administrador" if user == "admin" else "Visualizador"
            user_sector = "Todos"
            nome_completo = ""
            email = ""
            data_criacao = "N/A"

        # Aplicar busca
        if search_query and search_query.lower() not in user.lower() and search_query.lower() not in nome_completo.lower() and search_query.lower() not in email.lower():
            continue

        # Aplicar filtro de tipo
        if "Todos" in filter_type or user_type in filter_type:
            # Aplicar filtro de setor
            if "Todos" in filter_sector or user_sector in filter_sector:
                filtered_users[user] = data

    # Mostrar usu√°rios em uma tabela mais moderna
    if filtered_users:
        # Preparar dados para a tabela
        user_data_list = []
        for user, data in filtered_users.items():
            if isinstance(data, dict):
                user_type = data.get("tipo", "Visualizador")
                user_sector = data.get("setor", "Todos")
                nome_completo = data.get("nome_completo", "")
                email = data.get("email", "")
                data_criacao = data.get("data_criacao", "N/A")
                if data_criacao != "N/A":
                    try:
                        data_criacao = datetime.fromisoformat(data_criacao).strftime("%d/%m/%Y")
                    except:
                        pass
            else:
                user_type = "Administrador" if user == "admin" else "Visualizador"
                user_sector = "Todos"
                nome_completo = ""
                email = ""
                data_criacao = "N/A"

            # Determinar cor do tipo
            if user_type == "Administrador":
                type_color = "#26A69A"
            elif user_type == "Operador":
                type_color = "#FFC107"
            else:
                type_color = "#7E57C2"

            # Adicionar √† lista
            user_data_list.append({
                "Login": user,
                "Nome": nome_completo or "N√£o informado",
                "Email": email or "N√£o informado",
                "Tipo": user_type,
                "Setor": user_sector,
                "Criado em": data_criacao,
                "type_color": type_color,
                "is_current": user == st.session_state.username,
                "is_admin": user == "admin"
            })

        # Criar DataFrame para exibi√ß√£o
        df_users = pd.DataFrame(user_data_list)

        # Exibir cada usu√°rio em um card
        for i, row in df_users.iterrows():
            login = row["Login"]
            nome = row["Nome"]
            email = row["Email"]
            user_type = row["Tipo"]
            user_sector = row["Setor"]
            type_color = row["type_color"]
            is_current = row["is_current"]
            is_admin = row["is_admin"]

            # Criar card para o usu√°rio
            st.markdown(f"""
            <div style="background-color:#f8f9fa; padding:15px; border-radius:5px; margin-bottom:10px; border-left: 4px solid {type_color};">
                <div style="display:flex; justify-content:space-between; align-items:flex-start;">
                    <div>
                        <h3 style="margin:0; color:#37474F;">{nome} {' (voc√™)' if is_current else ''}</h3>
                        <p style="margin:5px 0 0 0; color:#546E7A;">Login: <strong>{login}</strong></p>
                        <p style="margin:3px 0 0 0; color:#546E7A;">Email: {email}</p>
                        <p style="margin:3px 0 0 0; color:#546E7A;">Criado em: {row['Criado em']}</p>
                    </div>
                    <div>
                        <span style="background-color:{type_color}; color:white; padding:5px 10px; border-radius:15px; font-size:12px;">{user_type}</span>
                        <span style="background-color:#90A4AE; color:white; padding:5px 10px; border-radius:15px; font-size:12px; margin-left:5px;">{user_sector}</span>
                    </div>
                </div>
            </div>
            """, unsafe_allow_html=True)

            # Op√ß√µes de edi√ß√£o e exclus√£o
            if not is_admin and not is_current:  # N√£o permitir alterar o admin ou a si mesmo
                col1, col2 = st.columns(2)

                with col1:
                    # Bot√£o de edi√ß√£o
                    if st.button("‚úèÔ∏è Editar", key=f"edit_{login}"):
                        st.session_state[f"editing_{login}"] = True

                with col2:
                    # Bot√£o de exclus√£o
                    if st.button("üóëÔ∏è Excluir", key=f"del_{login}"):
                        st.session_state[f"deleting_{login}"] = True

                # Formul√°rio de edi√ß√£o
                if st.session_state.get(f"editing_{login}", False):
                    with st.form(key=f"edit_form_{login}"):
                        st.subheader(f"Editar Usu√°rio: {nome}")

                        # Informa√ß√µes pessoais
                        st.markdown("#### Informa√ß√µes Pessoais")

                        col1, col2 = st.columns(2)
                        with col1:
                            new_nome = st.text_input("Nome Completo",
                                                     value=nome if nome != "N√£o informado" else "",
                                                     key=f"new_nome_{login}")

                            new_email = st.text_input("Email",
                                                      value=email if email != "N√£o informado" else "",
                                                      key=f"new_email_{login}")

                        with col2:
                            new_type = st.selectbox(
                                "Tipo de Usu√°rio",
                                options=["Administrador", "Operador", "Visualizador"],
                                index=["Administrador", "Operador", "Visualizador"].index(user_type),
                                key=f"new_type_{login}"
                            )

                            new_sector = st.selectbox(
                                "Setor",
                                options=["Todos"] + SETORES,
                                index=(["Todos"] + SETORES).index(user_sector) if user_sector in [
                                    "Todos"] + SETORES else 0,
                                key=f"new_sector_{login}"
                            )

                        # Op√ß√£o para redefinir senha
                        st.markdown("#### Informa√ß√µes de Acesso")
                        reset_password = st.checkbox("Redefinir senha", key=f"reset_pwd_{login}")

                        if reset_password:
                            new_password = st.text_input("Nova senha", type="password", key=f"new_pwd_{login}")
                            confirm_password = st.text_input("Confirmar nova senha", type="password",
                                                             key=f"confirm_pwd_{login}")

                        # Validar combina√ß√£o de tipo e setor
                        is_valid = True
                        if new_type == "Operador" and new_sector == "Todos":
                            st.error("‚ùå Operadores devem ser associados a um setor espec√≠fico.")
                            is_valid = False

                        if new_email and "@" not in new_email:
                            st.error("‚ùå Formato de email inv√°lido.")
                            is_valid = False

                        col1, col2 = st.columns(2)
                        with col1:
                            submit = st.form_submit_button("Salvar Altera√ß√µes")
                        with col2:
                            cancel = st.form_submit_button("Cancelar")

                        if submit and is_valid:
                            # Validar senha se estiver redefinindo
                            if reset_password:
                                if not new_password:
                                    st.error("‚ùå A nova senha √© obrigat√≥ria.")
                                    return
                                if new_password != confirm_password:
                                    st.error("‚ùå As senhas n√£o coincidem.")
                                    return

                            # Atualizar usu√°rio
                            if isinstance(users[login], dict):
                                users[login]["tipo"] = new_type
                                users[login]["setor"] = new_sector
                                users[login]["nome_completo"] = new_nome
                                users[login]["email"] = new_email
                                if reset_password:
                                    users[login]["password"] = hashlib.sha256(new_password.encode()).hexdigest()
                            else:
                                users[login] = {
                                    "password": hashlib.sha256(new_password.encode()).hexdigest() if reset_password else
                                    users[login],
                                    "tipo": new_type,
                                    "setor": new_sector,
                                    "nome_completo": new_nome,
                                    "email": new_email
                                }

                            # Salvar altera√ß√µes
                            save_users(users, USERS_FILE)
                            st.success(f"‚úÖ Usu√°rio '{new_nome}' atualizado com sucesso!")
                            log_user_action("Usu√°rio atualizado", login, USER_LOG_FILE)  # Registrar a√ß√£o de atualiza√ß√£o

                            # Limpar estado de edi√ß√£o
                            del st.session_state[f"editing_{login}"]
                            time.sleep(1)
                            st.rerun()

                        if cancel:
                            # Limpar estado de edi√ß√£o
                            del st.session_state[f"editing_{login}"]
                            st.rerun()

                # Confirma√ß√£o de exclus√£o
                if st.session_state.get(f"deleting_{login}", False):
                    st.warning(
                        f"‚ö†Ô∏è Tem certeza que deseja excluir o usu√°rio '{nome}' (login: {login})? Esta a√ß√£o n√£o pode ser desfeita.")

                    col1, col2 = st.columns(2)
                    with col1:
                        if st.button("‚úÖ Sim, excluir", key=f"confirm_del_{login}"):
                            delete_user(login, USERS_FILE, USER_LOG_FILE)
                            st.success(f"‚úÖ Usu√°rio '{nome}' exclu√≠do com sucesso!")

                            # Limpar estado de exclus√£o
                            del st.session_state[f"deleting_{login}"]
                            time.sleep(1)
                            st.rerun()

                    with col2:
                        if st.button("‚ùå Cancelar", key=f"cancel_del_{login}"):
                            # Limpar estado de exclus√£o
                            del st.session_state[f"deleting_{login}"]
                            st.rerun()

            st.markdown("<hr style='margin: 20px 0; border-color: #e0e0e0;'>", unsafe_allow_html=True)
    else:
        st.info("Nenhum usu√°rio encontrado com os filtros selecionados.")

    # Adicionar exporta√ß√£o de usu√°rios (apenas para admin)
    if st.session_state.username == "admin":
        if st.button("üì§ Exportar Lista"):
            # Preparar dados para exporta√ß√£o (sem senhas)
            export_data = []
            for user, data in users.items():
                if isinstance(data, dict):
                    user_type = data.get("tipo", "Visualizador")
                    user_sector = data.get("setor", "Todos")
                    nome_completo = data.get("nome_completo", "")
                    email = data.get("email", "")
                    data_criacao = data.get("data_criacao", "N/A")
                else:
                    user_type = "Administrador" if user == "admin" else "Visualizador"
                    user_sector = "Todos"
                    nome_completo = ""
                    email = ""
                    data_criacao = "N/A"

                export_data.append({
                    "Login": user,
                    "Nome Completo": nome_completo,
                    "Email": email,
                    "Tipo": user_type,
                    "Setor": user_sector,
                    "Data de Cria√ß√£o": data_criacao
                })

            # Criar DataFrame
            df_export = pd.DataFrame(export_data)

            # Criar link de download
            download_link = get_download_link(df_export, "usuarios_sistema.xlsx")
            st.markdown(download_link, unsafe_allow_html=True)

    st.markdown('</div>', unsafe_allow_html=True)

def logout():
    """Realiza o logout do usu√°rio."""
    for key in list(st.session_state.keys()):
        del st.session_state[key]
    st.rerun()

def define_data_directories():

    # Criar diret√≥rio de dados se n√£o existir
    if not os.path.exists(DATA_DIR):
        os.makedirs(DATA_DIR)

    # Inicializar arquivos JSON se n√£o existirem
    if not os.path.exists(INDICATORS_FILE):
        with open(INDICATORS_FILE, "w") as f:
            json.dump([], f)

    if not os.path.exists(RESULTS_FILE):
        with open(RESULTS_FILE, "w") as f:
            json.dump([], f)

    if not os.path.exists(CONFIG_FILE):
        with open(CONFIG_FILE, "w") as f:
            json.dump({"theme": "padrao"}, f)

    # Inicializar arquivo de usu√°rios com a nova estrutura se n√£o existir
    if not os.path.exists(USERS_FILE):
        default_users = {
            "admin": {
                "password": hashlib.sha256("6105/*".encode()).hexdigest(),
                "tipo": "Administrador",
                "setor": "Todos"  # Admin tem acesso a todos os setores
            }
        }
        with open(USERS_FILE, "w") as f:
            json.dump(default_users, f)

    if not os.path.exists(BACKUP_LOG_FILE):
        with open(BACKUP_LOG_FILE, "w") as f:
            json.dump([], f)

    if not os.path.exists(INDICATOR_LOG_FILE):
        with open(INDICATOR_LOG_FILE, "w") as f:
            json.dump([], f)

    if not os.path.exists(USER_LOG_FILE):
        with open(USER_LOG_FILE, "w") as f:
            json.dump([], f)

    return DATA_DIR, INDICATORS_FILE, RESULTS_FILE, CONFIG_FILE, USERS_FILE, BACKUP_LOG_FILE, INDICATOR_LOG_FILE, USER_LOG_FILE, KEY_FILE

def main():
    # Inicializar o estado da sess√£o
    initialize_session_state()

    # Get the file paths from the global scope
    DATA_DIR, INDICATORS_FILE, RESULTS_FILE, CONFIG_FILE, USERS_FILE, BACKUP_LOG_FILE, INDICATOR_LOG_FILE, USER_LOG_FILE, KEY_FILE = define_data_directories()

    # Defini√ß√£o do tema padr√£o
    TEMA_PADRAO = {
        "name": "Padr√£o",
        "primary_color": "#1E88E5",
        "secondary_color": "#26A69A",
        "background_color": "#FFFFFF",
        "text_color": "#37474F",
        "accent_color": "#FF5252",
        "chart_colors": ["#1E88E5", "#26A69A", "#FFC107", "#7E57C2", "#EC407A"],
        "is_dark": False
    }

    # Lista de setores para sele√ß√£o
    SETORES = ["RH", "Financeiro", "Opera√ß√µes", "Marketing", "Comercial", "TI", "Log√≠stica", "Produ√ß√£o"]

    # Lista de tipos de gr√°ficos
    TIPOS_GRAFICOS = ["Linha", "Barra", "Pizza", "√Årea", "Dispers√£o"]

    # Definir √≠cones do menu
    MENU_ICONS = define_menu_icons()

    # Inicializar objeto de criptografia
    generate_key(KEY_FILE)
    cipher = initialize_cipher(KEY_FILE)

    # Verificar autentica√ß√£o
    if not st.session_state.authenticated:
        show_login_page()
        return

    # Obter tipo e setor do usu√°rio
    user_type = get_user_type(st.session_state.username, USERS_FILE)
    user_sector = get_user_sector(st.session_state.username, USERS_FILE)

    # Armazenar o tipo e setor de usu√°rio na sess√£o
    st.session_state.user_type = user_type
    st.session_state.user_sector = user_sector

    # Aplicar CSS global
    st.markdown("""
    <style>
        /* Estilo geral */
        .main {
            background-color: #f8f9fa;
            padding: 1rem;
        }

           /* Remover o menu de deploy */
        [data-testid="stToolbar"] {
            display: none !important;
        }

        /* Remover a borda colorida */
        [data-testid="stAppViewContainer"] {
            border: none !important;
        }

        /* Remover o rodap√© do Streamlit */
        footer {
            display: none !important;
        }

        /* Remover o √≠cone de hamb√∫rguer e menu principal */
        #MainMenu {
            visibility: hidden !important;
        }

        /* Remover o header com informa√ß√µes do Streamlit */
        header {
            display: none !important;
        }

        /* Cards */
        .dashboard-card {
            background-color: white;
            border-radius: 10px;
            padding: 20px;
            margin-bottom: 20px;
            box-shadow: 0 2px 5px rgba(0,0,0,0.1);
        }

        /* Cabe√ßalhos */
        h1, h2, h3 {
            color: #1E88E5;
        }

        /* Sidebar */
        section[data-testid="stSidebar"] {
            background-color: #f8f9fa;
        }

        /* Bot√µes da sidebar */
        section[data-testid="stSidebar"] button {
            width: 100%;
            border-radius: 5px;
            text-align: left;
            margin-bottom: 5px;
            height: 40px;
            padding: 0 15px;
            font-size: 14px;
        }

        /* Bot√£o ativo */
        .active-button button {
            background-color: #e3f2fd !important;
            border-left: 3px solid #1E88E5 !important;
            color: #1E88E5 !important;
            font-weight: 500 !important;
        }

        /* Remover padding extra da sidebar */
        section[data-testid="stSidebar"] > div:first-child {
            padding-top: 0;
        }

        /* Perfil do usu√°rio */
        .user-profile {
            background-color: white;
            padding: 10px;
            border-radius: 5px;
            margin-bottom: 15px;
            border: 1px solid #e0e0e0;
        }

        /* Rodap√© da sidebar */
        .sidebar-footer {
            position: fixed;
            bottom: 0;
            left: 0;
            width: 100%;
            background-color: #f8f9fa;
            border-top: 1px solid #e0e0e0;
            padding: 10px;
            font-size: 12px;
            color: #666;
            text-align: center;
        }
    </style>
    """, unsafe_allow_html=True)

    # T√≠tulo principal
    st.title("üìä Portal de Indicadores")

    # Sidebar - Logo
    if os.path.exists("logo.png"):
        st.sidebar.markdown(f"<div style='text-align: center;'>{img_to_html('logo.png')}</div>", unsafe_allow_html=True)
    else:
        st.sidebar.markdown("<h1 style='text-align: center; font-size: 40px;'>üìä</h1>", unsafe_allow_html=True)

    st.sidebar.markdown("<hr style='margin: 15px 0;'>", unsafe_allow_html=True)

    # Sidebar - Perfil do usu√°rio
    st.sidebar.markdown(f"""
    <div class="user-profile">
        <p style="margin:0; font-weight:bold;">{st.session_state.username}</p>
        <p style="margin:0; font-size:12px; color:#666;">{user_type}</p>
        {f'<p style="margin:0; font-size:12px; color:#666;">Setor: {user_sector}</p>' if user_type == "Operador" else ''}
    </div>
    """, unsafe_allow_html=True)

    # Bot√£o de logout
    if st.sidebar.button("üö™ Sair", help="Fazer logout"):
        logout()

    st.sidebar.markdown("<hr style='margin: 15px 0;'>", unsafe_allow_html=True)

    # Inicializar p√°gina atual se n√£o existir
    if 'page' not in st.session_state:
        st.session_state.page = "Dashboard"

    # Definir menus dispon√≠veis com base no tipo de usu√°rio
    if user_type == "Administrador":
        menu_items = ["Dashboard", "Criar Indicador", "Editar Indicador", "Preencher Indicador",
                      "Vis√£o Geral", "Configura√ß√µes", "Gerenciar Usu√°rios"]
    elif user_type == "Operador":
        menu_items = ["Dashboard", "Preencher Indicador", "Vis√£o Geral"]
        if st.session_state.page not in menu_items:
            st.session_state.page = "Dashboard"
    else:  # Visualizador
        menu_items = ["Dashboard", "Vis√£o Geral"]
        if st.session_state.page not in menu_items:
            st.session_state.page = "Dashboard"

    # Renderizar bot√µes do menu
    for item in menu_items:
        icon = MENU_ICONS.get(item, "üìã")

        # Aplicar classe ativa ao bot√£o selecionado
        is_active = st.session_state.page == item
        active_class = "active-button" if is_active else ""

        st.sidebar.markdown(f'<div class="{active_class}">', unsafe_allow_html=True)
        if st.sidebar.button(f"{icon} {item}", key=f"menu_{item}"):
            st.session_state.page = item
            st.rerun()
        st.sidebar.markdown('</div>', unsafe_allow_html=True)

    # Rodap√© da sidebar
    st.sidebar.markdown("""
    <div class="sidebar-footer">
        <p style="margin:0;">Portal de Indicadores v1.2</p>
        <p style="margin:3px 0 0 0;">¬© 2025 Todos os direitos reservados</p>
    </div>
    """, unsafe_allow_html=True)

    # Exibir a p√°gina selecionada
    if st.session_state.page == "Dashboard":
        show_dashboard(INDICATORS_FILE, RESULTS_FILE, TEMA_PADRAO, SETORES)
    elif st.session_state.page == "Criar Indicador" and user_type == "Administrador":
        create_indicator(SETORES, TIPOS_GRAFICOS, INDICATORS_FILE, INDICATOR_LOG_FILE)
    elif st.session_state.page == "Editar Indicador" and user_type == "Administrador":
        edit_indicator(SETORES, TIPOS_GRAFICOS, INDICATORS_FILE, INDICATOR_LOG_FILE, RESULTS_FILE)
    elif st.session_state.page == "Preencher Indicador" and user_type in ["Administrador", "Operador"]:
        fill_indicator(SETORES, INDICATORS_FILE, RESULTS_FILE, TEMA_PADRAO)
    elif st.session_state.page == "Vis√£o Geral":
        show_overview(INDICATORS_FILE, RESULTS_FILE)
    elif st.session_state.page == "Configura√ß√µes" and user_type == "Administrador":
        show_settings(USERS_FILE, INDICATORS_FILE, RESULTS_FILE, BACKUP_LOG_FILE, INDICATOR_LOG_FILE, USER_LOG_FILE,KEY_FILE, cipher, CONFIG_FILE)
    elif st.session_state.page == "Gerenciar Usu√°rios" and user_type == "Administrador":
        show_user_management(SETORES, USERS_FILE, USER_LOG_FILE)
    else:
        st.warning("Voc√™ n√£o tem permiss√£o para acessar esta p√°gina.")
        st.session_state.page = "Dashboard"
        st.rerun()

    # Inicia o agendamento de backup usando schedule em um thread separado
    backup_thread = threading.Thread(target=agendar_backup, args=(INDICATORS_FILE, RESULTS_FILE, CONFIG_FILE, USERS_FILE, BACKUP_LOG_FILE, INDICATOR_LOG_FILE, USER_LOG_FILE, KEY_FILE, cipher))
    backup_thread.daemon = True
    backup_thread.start()

# Executar aplica√ß√£o
if __name__ == "__main__":
    main()
